<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/feed.xml" rel="self" type="application/atom+xml" /><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/" rel="alternate" type="text/html" /><updated>2021-06-22T21:23:46+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/feed.xml</id><title type="html">GSoC 2021 Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>predator4hack</name></author><entry><title type="html">Week 2</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2.html" rel="alternate" type="text/html" title="Week 2" /><published>2021-06-20T00:00:00+05:30</published><updated>2021-06-20T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2.html">&lt;h2 id=&quot;version-control&quot;&gt;Version Control&lt;/h2&gt;

&lt;p&gt;This week didn’t start out the way I had planned, but it did teach me a valuable lesson about the significance of version control! I was working on adding gazebo to the exercise when I came upon this. I realised that the existing exercises didn’t seem to work properly. The reason for this is yet unknown, although it was most likely caused by two or more exercises requesting the same port in the websocket server. And things became even worse when I realised I hadn’t been committing to my changes for a few days. As a result, I had to restart the work from the begining.&lt;/p&gt;

&lt;p&gt;As I was going through the process of creating a new exercise, I figured out the solution for the problems that we were having with exercise connectivity and dockerfile. Previously, when I mounted the container’s repository with a local repository, the exercises weren’t unable to connect. The reason for this was due to the change in structure of repository caused by usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN rsync -a --exclude 'ace-builds' /RoboticsAcademy/exercises/static/exercises/* /RoboticsAcademy/exercises&lt;/code&gt; command used in the dockerfile. A temproary solution which I earlier went with was to change the path of each exercise manually in the &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/blob/master/scripts/instructions.json&quot;&gt;instructions.json&lt;/a&gt; but this might create merge conflicts. A better way of resolving this is to just use the same rync command after bind mount in the local repository. This will change the directory structure according to the paths in the instruction.json file. The same command can be used after the exercise has been created to structure  according to the original repository.&lt;/p&gt;

&lt;h2 id=&quot;launch-file-for-gazebo&quot;&gt;Launch file for Gazebo&lt;/h2&gt;

&lt;p&gt;I started working on our launch file after studying other exercises. Except for the point where the Kinematic Widget was called, this was going to be largely similar to the launch file of the ROS Node template. So I decided to include this widget in the html page and semd the commands to gazebo using roslibjs. This way, I’ll have to rewrite all of the interface functions, including GUI and HAL. However, it appears that I do not need to perform all of this and that simply using rqt will suffice. I’m not sure about this method, and we’ll talk about it in the next meeting.&lt;/p&gt;

&lt;h2 id=&quot;set-up-automated-build-on-docker-hub&quot;&gt;Set Up Automated Build on Docker Hub&lt;/h2&gt;

&lt;p&gt;Following discussions with mentors, we decided to use automated build for the industrial robots repo, so that the Docker hub can automatically generate images from source code in the pick &amp;amp; place branch and push the finalized image to the Docker repo. Others will be able to readily access the images with the most recent modifications in the exercise.&lt;/p&gt;

&lt;p&gt;However, there isn’t any official documentation on multi-stage builds on Docker Hub. I tried a few different approaches, such as using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./build.sh&lt;/code&gt; or building both images separately, but none of them worked. So we still have to figure out a way to get this working.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Gazebo" /><category term="Rviz" /><category term="Git" /><summary type="html">Version Control</summary></entry><entry><title type="html">Week 1</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1.html" rel="alternate" type="text/html" title="Week 1" /><published>2021-06-14T00:00:00+05:30</published><updated>2021-06-14T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1.html">&lt;h2 id=&quot;pyqt5-gui&quot;&gt;PyQt5 GUI&lt;/h2&gt;

&lt;p&gt;This is the first week of coding period, so I started with designing UI for the web-templates. I began by making a simple PyQt5 GUI for a pick-and-place exercise.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pypi.org/project/PyQt5/&quot;&gt;PyQt5&lt;/a&gt; is a comprehensive set of Python bindings for Qt v5. It is implemented as more than 35 extension modules and enables Python to be used as an alternative application development language to C++ on all supported platforms including iOS and Android.&lt;/p&gt;

&lt;p&gt;Since the pick and place exercise necessitates heavy use of Gazebo and Rviz, I positioned their displays side by side so that users would not experience difficulty scrolling or changing tabs. The basic design of a GUI is seen in the figure below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/vW8PW_aGAPuWcyc9iP54UJWEiwo8LLA3Pwau2UFR1WNQwb9VnXAl5NGvkSTXJ7yw0SvzdgA1bY5U2gzsiH-rQDY59dze8Xq73ww_h_dHnY2Ic9cSKAbx0_J5qJLxuBq0Q-dzRj3Zxk44icgi4oD1MMULe2kIOvcTNHxY-rUwH8qU2XaqWFre9pMJ0A8CjFrfjUUJ0fRIXmQEg3J2XvgT2WcceKXPB4vXPrjRr2ekQs5SU9DbzZvV6yHuqWx9np4RFGPq_0Alg5tg_Adj3EkcAF3Vr-cDNN1aPE5SSZIIeHG7M6q_gSljcpvqgLRlXwodhWqUj8mgmIe9L5l2kyGkM6MXQp-NpfeoYW00l71v3WjW_LqhJVgz2P2Vcffxij5Q0XQibJDcyaVqsuCfcvqosKAHhc0wbIUm32xnjFvEk32Wba4BtUwJlZvgAI2nyxK4Iw2CINNUHnVBtW8VHCsv125S3Fo2AuhWNMKNLY1aYbsDC3XIbCW66NpT8truCh3ZbB2v278SMqn-Y3K9FMSwDuqXFPk258zaCjAunquOk5Z5snrZjVkeUXXcJKsevJz-t_uZabWzRU8RWWeb60DmVsa6Eu1JZCmZexAj7KAKrzKmlwhI03pq1HXWDZ0D8l3PuGvxwACDLcL7qn_TJp7WY0AGcZSTgJhEeuzxmpSvhKi-szlHMWjw0KJz4PtHtlDZzWZHk8rn-IVskVT1yCZYnF0=w1093-h838-no?authuser=0&quot; width=&quot;400&quot; height=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since Robotics Academy has shifted to web-templates, we will no longer be working on PyQt5 GUIs and will instead focus on improving the web-templates of current exercises.&lt;/p&gt;

&lt;h2 id=&quot;adding-cards-for-pick-and-place-exercise&quot;&gt;Adding cards for pick and place exercise&lt;/h2&gt;

&lt;p&gt;To include a new exercise, one needs to add the folder with the exercise contents in exercises/static/exercises following the file name conventions. Then, create the entry in db.sqlite3. A simple way to do this is by using the Django admin page:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run python3.8 manage.py runserver.&lt;/li&gt;
  &lt;li&gt;Access http://127.0.0.1:8000/admin/ on a browser and log in with “user” and “pass”.&lt;/li&gt;
  &lt;li&gt;Click on “add exercise” and fill the fields: exercise id (folder name), name (name to display), state, language and description (description to display). Save and exit.&lt;/li&gt;
  &lt;li&gt;Commit db.sqlite3 changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/4f1ZPcrCAryHH7LjQjJ8BmLmRBnVFPe1Mo7m6DYA_i1rvclknxnm7XSXovTmV5BSjKs7DuBM9Bp6ybIPdWdOnei5fqdI-fgltgiJM1YQ_1mWDQRmjVhmkszyuy0RHUcb1a5Z2TEeHB67WnFwzzNS90xjgntvbtv4_sshbfUa6EWYaXk5j7Ja2g8DgK3Hw_bCDDn9aB5w2YK7avrLyp0iGvLW6FZWG2JbnrXCmCEzcu31BJ8yy5sLwwQIo_snTUh16o3WxpMyP7IE_badYrFOyXYQMX2I_E4QkGiWm1qP2LXdXnhCAjF5cu5qv3wGX0AJFGKdoSQqYH9as-sC56AURLn8oDDyf444t7i-1Wgqg_fQVZt3Jxl3jtj6JfA7xPCqih10lUrv86jyw7RxK7fg6QSw8Tk6s9c4lSMr0m49RhXuO0O5WumUY3w5Gqv1hx_3No5BaKliJ6MrMNJeetjzXpP_ayvwKGNlvDfnRdDJmd1fwNhYeNk1qGtyOvIks_zl6430ugzQDghYkELMXafegQyZO8hoIetLBCX7abBk3Ydu-T_D2-z2AUKWf4w7Gtk1SRBjCpTIJ3GkdQXcQBVhhwUXV8wRabAAv3uAghZ8I7axfgnWD8jg8uvfvSE_uKWTrenEPIovrWcXo2bZySM0tsAZ1Tnoukbr4S8uk4wflMckyvmpZ-TcizeHbcX7pvW7si7S14XbQwsSbHUP0GE-GLE=w560-h315-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-interface-for-pick-and-place-exercise&quot;&gt;User Interface for pick and place exercise&lt;/h2&gt;

&lt;p&gt;I began working on the exercise’s User Interface after generating a card for pick and place. In this exercise, we have two options: we may use a Rviz display or we can abstract all of Rviz’s functions and develop an Industrial Robot Teleoperator that just provides the functionality required by the exercise, such as forward and inverse kinematics. We intend to use Rviz because other exercises may require it.&lt;/p&gt;

&lt;p&gt;The pick and place exercise is depicted in the image below. Rviz, on the other hand, has yet to be exposed on a VNC display. Following a discussion with my mentors, we agreed to make this a higher priority and get it up and running within the next week.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/GloyCMKSosFooNqZ6mBFj1eYGh67ohsoviQFWuPWFevjYOPvArphXibAN-uZN45UmDy8ufqiPE7XeYyBVGSktJzIbqfHtMV_R8na4LLHXYqyx_c2ZVNaEMjl6lKYybK3YFuSPdntxOJBfg_xKS8On0ga7vxriK22VAfanDPYcZWQFEpnP8hGOLPdbp1H2h_p-Bq38ehBoFsX-YcV55xQH2vQhdn0ELQ6RpfwxtTveywVwbzoJrOuJCDHQxKl5pLLLKmyHyAOO1scJmH6Qcv_SMLi8DhMQGbExiFeD0tAs86x2EkQYT_xI0p_TGXhPnhJndMkvDKc8jzpIPHfsybIQ0gotVbrFd_v4IfRCw3Sqccu-Uk6sgnoT9Zq0beNd5vPVMTQZumqy12B9XhBPuEaKMEoBeiW5tsX2sJc2_2ulIMTruAhiZsJxc5Yx-CXVxax9N7gxjHUEC3I44x_m0m8scIGek-yRK9E0rL927b0P9iO8YvfX1hvctE9Xu7Th6XKYpUGJ9P_3rrYUFx0KF5xrCYTF0JvIfPH5GsKEId6RkQsmSEua60UqyWRhOOL5fRXJL-xXCoJUOl44M9VYD-QWYJxpUOr0udkuhFZ7HAqITRK8sJk-REFexjWGsKHQ95aAXNMtqJPQ86IeurZzLy53Dd3MaL1NNEEvwmXEORbnp_8uBXbGvnKq5Ht9eBfoZYd2csFiK15FVEKK3pFhI0DcEY=w1477-h830-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-the-current-work-on-docker-hub&quot;&gt;Update the current work on docker hub&lt;/h2&gt;

&lt;h2 id=&quot;meet-1&quot;&gt;Meet 1&lt;/h2&gt;

&lt;p&gt;Minutes of the meet:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a docker image, upload it on docker hub, and mention the details in week 1 blog.&lt;/li&gt;
  &lt;li&gt;Incorporate Gazebo in the current template&lt;/li&gt;
  &lt;li&gt;Incorporate Rviz in the current template&lt;/li&gt;
  &lt;li&gt;Notify once blog is updated on the slack channel&lt;/li&gt;
&lt;/ul&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="PyQt5" /><category term="Frontend" /><category term="UI/UX" /><category term="Meet" /><summary type="html">PyQt5 GUI</summary></entry><entry><title type="html">Community Bonding Week 2-3</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3.html" rel="alternate" type="text/html" title="Community Bonding Week 2-3" /><published>2021-06-06T00:00:00+05:30</published><updated>2021-06-06T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3.html">&lt;h2 id=&quot;docker-bind-mount&quot;&gt;Docker Bind Mount&lt;/h2&gt;

&lt;p&gt;The first step in starting development in a docker container is to use bind mounts or volumes so that the changes in the docker container can be seen without having to rebuild the image. Bind mounts can be used to create side-by-side development environments and also to share data that needs to persist longer than the lifespan of the docker container.&lt;/p&gt;

&lt;p&gt;When you use a bind mount, a file or directory on the host machine is mounted into a container. The file or directory is referenced by its absolute path on the host machine. By contrast, when you use a volume, a new directory is created within Docker’s storage directory on the host machine, and Docker manages that directory’s contents.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://docs.docker.com/storage/images/types-of-mounts-volume.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;warnings-and-errors&quot;&gt;Warnings and errors&lt;/h3&gt;

&lt;h4 id=&quot;ros-gpg-key-expiration&quot;&gt;ROS GPG Key Expiration&lt;/h4&gt;

&lt;p&gt;ROS GPG keys inadvertently expired and caused apt failures for a number of users. A full description of the security breach and the remediation can be found in this &lt;a href=&quot;https://discourse.ros.org/t/new-gpg-keys-deployed-for-packages-ros-org/9454&quot;&gt;ROS Discourse post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To fix this issue one will need to update the public key used for ROS apt repositories. To do this for ROS 1 installations you need to run a single command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/commit/842c0758a856c7119b6435fc8f17907bd17fdab1&quot;&gt;commit&lt;/a&gt; has been created in order to fix this issue.&lt;/p&gt;

&lt;h4 id=&quot;rle-exception&quot;&gt;RLE Exception&lt;/h4&gt;

&lt;p&gt;After successfully mounting the container with my local repository, I discovered that none of the exercises are connecting to the server and following error was displayed:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLE Exception: [./RoboticsAcademy/exercises/follow_line/web-template/launch/simple_line_follower_ros_headless.launch] is not a launch file name The traceback for the exception was written to the log file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After altering the GAZEBO_RESOURCE_PATH and paths in instruction.json, the error was rectified.&lt;/p&gt;

&lt;h2 id=&quot;gazeboweb-testing&quot;&gt;GazeboWeb Testing&lt;/h2&gt;

&lt;p&gt;Robotics Academy uses GazeboWeb as a front-end graphical interface to gzserver which provides visualization of the simulation. Gzweb lets you interact with the simulation from the comfort of a web browser. This means cross-platform support, minimal client-side installation, and support for mobile devices.&lt;/p&gt;

&lt;p&gt;To learn how Gzweb works, I made a basic webpage, connected it to ROS with rosbridge server, and used the roslibjs package  to drive turtlebot3 around in a circle.  A short video below demonstrates the moving turtlebot after recieving commands from html page.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/OeIUv2RfDsURUvdcR9ojQEpCPRSWOIiE2lpwqOqH6frcVf0Bmz5utv6MeMOFW2coihkK5X8Nxe7kd-mtl-4di16d7tWgp_WTDPuSD4TBRdTmM8pXSgpRYyIyuDUh2RZMjV5J4hUuLdnc0wknr6aNZvfOQPcO7ycKoVcthp_OnLdlvNz40DCrEpZgOkV511ZtIfO7Chz5nUMykFql8CMLXc134C7YENwSKo8hM_mJzgIfOLBlXJZCwn4rdjHXYuMaG4Y8hMQV6droGe4LCaybPo18PDF9PHyXtXg5CpRFoocgZA3pyD4HveVvfVqXk59wgzIzw1qOBT5BFr-5jdBEMBt4-fgYpWKgygxSLzj8w4pthvm7vhzmEk46geQof1d4SFQvNmxXJrfkkAXxHQ9GyRcx9IX-o5-9Om39ktTbnCxfIk6J3Zxre0xzeD91akcSKqZL52h7byPjH1OFiwojT8Vail2q0ZJGnu0NQE1Ah220dScrQmK15x4Cfoypp5lUV2xt1GORM-3cca_U5M9_LXMm3gEb1Xf0cQb8V3g4OH9aH8e0yTSgGNTJmTO1u1szsVvxG2TfrnffBRF8QYV1vN3utemu0IMILzNRMVTzH-Ir8d0VNGV9hkDGPSj0w3O4heGRTjKiJ8hcnueaX2cwzRl1PQL0N6emje8-qpomnz9yc3nfMTp1Q3PTCaOt1Bzs2cIcjRFZ8u54cNeWRYhC1kc=w600-h338-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rvizweb-testing&quot;&gt;RvizWeb Testing&lt;/h2&gt;

&lt;p&gt;Rviz is required for Industrial Robot exercises, and RviWeb is one method for incorporating Rviz into a web page. RVizWeb provides a convenient way of building and launching a web application with features similar to RViz. This &lt;a href=&quot;https://github.com/osrf/rvizweb&quot;&gt;documentation&lt;/a&gt; contains further information on RvizWeb.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/3C_RFxIe0YD038mqlItSh8OlaAEvjsEqEL8HuHbl2XUPn0Ia1RmUd7yJlAjGDHWh7jbo6Iaieu9uM2Dm5qulk_nXJYplXrbXyg_67eCke-bEcU6TB-Ba8tya94xpCW8PcTXoolsIJ6KcbMoa6P22mdZUm05LqjbPiJ9ZDfO76Zq5GkAnwWJy78GoAobItslhscmz0Jl18Z2Pq2avg5NX0JVDXO8f6CiMaLI3WcDcaMNr3Zxw2oHjUKLUZsPDBy7puxeYxYOSirit_o7OYXPfMar4kBTu2LFBwVGst_yiaIJl2g9CuCL8pwufHx0oMpfvYVTRXLeq_uuQ22YPV952v3_ZCfC0HCBYOkStj-RDlwmnHvn7YcLRx5Oii0gnTW-i5OZzVrmp3fySIfEgIKHfw2hQuhm-QqlqBB4xza015i-MOunVxNgsQMUxiUsMlFpnDqbaLwUGNcGHGF5210l_ijwb0SgaGSv4qMfaL4vzJ4sJMuUVXCQwIHoXu9S7CvMNWNIXV9bAfDLKt29NoN2HBEGuf2VpjVsy5dX6rBpUM-qXJCuqoJGhW-esLrEY0J1pj0PKlpO7QyTOo_gjDKpxxaIQy7_vUlzeRmztAaZOL6Fo-aPolDw8Bu8D-el37elBSkLfCALXhCv3I57I4JazhZTJNO_ovmhJkx305vKleuDKXjYzS6qqRIW9jqIFkxRaFJrN_335FgaNZI0xU7Lgzks=w1477-h830-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-bullet-for-collision-checking&quot;&gt;Using Bullet for Collision Checking&lt;/h2&gt;

&lt;p&gt;According to the project proposal, we planned to use bullet for collision checking. Bullet has continuous collision capabilities. This means that it can be guaranteed that no collision occurs during the transition between two discrete robot states with the environment.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/RqqVC1F_ckEQjFGbrMxM8pejX-04uICab4NrQ2nF7hQNPYiGYMVmIlQIDG7Q8ZQrxnroydZTUfTbXsKji4jYwEkUK4Zk8CpQ8QBg_4pAIGt22m9puTW0zK7XL63XoMIkSQ50-PNZjqsZpFXKzOT-MX3Y5H9n5wpkyeopGucEbVC-qG0hSsKMV-mnVdZ58MejrZkNc3GxFTxKwx0qZBkS27PPLb9nLcgUCLtlLb8v7FC_3U73T-BXP9rKvWL_DxuJ_oA_heqgLmdqClozC57R9WEgw8RitvtIxt1KkW8aoxS1mz0KeLhKORFOcF6nDxYbSgVIP50CzK51gEhmRDZ_en0fWvzvZxIMCTFOoI-VdGgiWuwGMX096P-Ju7ASi3eCrBwLGLG1ThruiA_KnpzQofqWi54jZ8KYLSUiBeG7jD9olsk_pY52utvw3TN0gY7xcByS4HpzSX61JjED3F8L-KEMw_VHipplto9VrDbhy_gDbTuzl9IVJ8m38Z7vwsJurME6uQ8v99mzELPBy43RMgKOalt9FqY0_bW0FEkvhH8OUlcUef-tyo4aJRRVNOOjszmppyGeWhVpw0PSqF5WxEZQohYvBUfRpspC8gX7U4gpb58jJ_aCShyrs57swtsKURl7ValitwxCZZ1XgjQK-kVbLFQsN9IgaA1jOZSdc3Z1O9pmZXig0rEfrNMzTqKxjaYP6Zpx6rE34mp4qmJmuj4=w1477-h830-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bullet’s only drawback is that it is not compatible with all versions. Bullet is a ROS1-Noetic and ROS2-Foxy. I also discovered that the bullet took a long time to compute the place of collision (much slower than using traditional non-continuous collision). As a result, I feel we can put the process of adding bullets into the industrial robot exercise on hold until we get to Noetic.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="community bonding" /><category term="docker" /><category term="Rvizweb" /><category term="Gzweb" /><summary type="html">Docker Bind Mount</summary></entry><entry><title type="html">Community Bonding - Week 1</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/05/23/community-bonding-week-1.html" rel="alternate" type="text/html" title="Community Bonding - Week 1" /><published>2021-05-23T00:00:00+05:30</published><updated>2021-05-23T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/05/23/community-bonding-week-1</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/05/23/community-bonding-week-1.html">&lt;p&gt;Google Summer of Code starts with the Community Bonding period where we get to know about the community and get familiar with the code base and work style.&lt;/p&gt;

&lt;p&gt;The first week of community bonding was all about getting familiar with JdeRobt Robotics Acadmey. Currently there are nine exercises that are updated in v2.3. The primary goal of this project is to add add three more exercises that are pick and place, machine vision and mobile manipulation exercise.&lt;/p&gt;

&lt;h2 id=&quot;pick-and-place&quot;&gt;Pick And Place&lt;/h2&gt;

&lt;p&gt;The goal of this exercise is to learn the underlying infrastructure of Industrial Robot exercises(ROS + MoveIt + our own industrial robotics API) and get familiar with the key components needed for more complex exercises by completing the task of pick and place multiple objects and classify them by color or shape. Link to the &lt;a href=&quot;http://jderobot.github.io/RoboticsAcademy/exercises/IndustrialRobots/pick_place&quot;&gt;exercise&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;machine-vision&quot;&gt;Machine Vision&lt;/h2&gt;

&lt;p&gt;The goal of this exercise is to learn how to use vision to assist industrial robot by detecting known objects and unknown obstacles. The shape, size and color of the objects are known, but the pose of them and the situation of obstacles in surrounding environment need to be found using two cameras. Link to the &lt;a href=&quot;http://jderobot.github.io/RoboticsAcademy/exercises/IndustrialRobots/machine_vision&quot;&gt;exercise&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;mobile-manipulation&quot;&gt;Mobile Manipulation&lt;/h2&gt;

&lt;p&gt;The goal of this exercise is to practice integrating navigation and manipulation. You will need to use a mobile manipulator(AGV+robot arm+gripper) to pick objects on one conveyor and place them on three other conveyors. Link to the &lt;a href=&quot;http://jderobot.github.io/RoboticsAcademy/exercises/IndustrialRobots/mobile_manipulation&quot;&gt;exercise&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;getting-familiar-with-the-web-template-and-docker&quot;&gt;Getting familiar with the web-template and docker&lt;/h1&gt;

&lt;p&gt;Ros is very specific to the versions of operating systems, packages and other dependencies. This is why it becomes difficult for a beginner to start off with the project. The installation has been greatly simplified, as all the required dependencies are already pre-installed in the &lt;a href=&quot;https://hub.docker.com/r/jderobot/robotics-academy&quot;&gt;Robotics-Academy Docker Image&lt;/a&gt;. Robotics Academy (2.3 release) supports Linux (Ubuntu 18.04, 20.04 and other distributions), MacOS and Windows.&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. More in the &lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;documentaion&lt;/a&gt; of Docker&lt;/p&gt;

&lt;h2 id=&quot;migration-of-industrial-robots-repository-to-current-radi&quot;&gt;Migration of Industrial Robots Repository to current RADI&lt;/h2&gt;

&lt;p&gt;The sole purpose of this task was to get familiarized with the structure of Robotics Academy Docker Image(RADI) and understand how to work with docker.&lt;/p&gt;

&lt;h3 id=&quot;warnings-and-errors&quot;&gt;Warnings and Errors&lt;/h3&gt;

&lt;p&gt;As Robotics Acadmey is using multi stage build which uses a build.sh script to automate the whole process, one small error occured which was due to limited permissions given while executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./build.sh &amp;lt;tag&amp;gt;&lt;/code&gt;
This can be easily resolved using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash ./build.sh&lt;/code&gt;.&lt;/p&gt;</content><author><name>Chandan</name></author><category term="community bonding" /><category term="docker" /><category term="exercises" /><summary type="html">Google Summer of Code starts with the Community Bonding period where we get to know about the community and get familiar with the code base and work style.</summary></entry></feed>