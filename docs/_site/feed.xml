<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/feed.xml" rel="self" type="application/atom+xml" /><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/" rel="alternate" type="text/html" /><updated>2021-08-10T15:05:29+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/feed.xml</id><title type="html">GSoC 2021 Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>predator4hack</name></author><entry><title type="html">Week 9</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/08/08/week-9.html" rel="alternate" type="text/html" title="Week 9" /><published>2021-08-08T00:00:00+05:30</published><updated>2021-08-08T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/08/08/week-9</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/08/08/week-9.html">&lt;h2 id=&quot;machine-vision&quot;&gt;Machine Vision&lt;/h2&gt;

&lt;p&gt;We considered having a separate pull request for Rviz during last week’s meeting so that other developers can incorporate it into other exercises more easily. We decided to implement this with Machine Vision exercise because Pick And Place exercise was already integrated with Rviz. As a result, I’ll need to first create a pull request for Machine vision exercise moved to web-templates without Rviz, and then another pull request to add Rviz as a feature.&lt;/p&gt;

&lt;p&gt;So the Machine Vision exercise was the first thing I did this week. But, once again, I came into the same error of not being able to locate the nodes i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR: cannot launch node of type [pcl_filter/pcl_filter_server]: Cannot locate node of type [pcl_filter_server] in package [pcl_filter]. Make sure file exists in package path and permission is set to executable (chmod +x)&lt;/code&gt;. Other than that, there were other transform errors that are easily overlooked, but when run in the container, they appear in the terminal frequently, which isn’t ideal. All of the errors are depicted in the image below:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/hoUKn6JwjBiEvMyjf9CJFlHPppOfP2rix8qIcRfTRZpN8UJp8JEhZLc2HaWoNV6Ydx4V9hc4dQkTMgR9wXes3CeNZUZG1fRs3WH0e-BpWvvzSyAjKAi-gSdV0BOPP_HYW-s7Ucsf-Xjc6z3yoLt3u8_96Ybqjyt9diSYaAQwAyazpGD6rR_5Ndf29zAUR0oLU4kNH_W7howMHPiMy4Xao5AgwNOoz0ABK0qD-6OPNYyni2VIu0h96CaMzz_UXp7aJTcdoeGKHLqpbpMTy4DVsbaJ2wJhjAo7SnZeTcY7yHmQH-je_yFa04NmvmoJckrF5eI8NZPaKW7KLpWwqjklZCDLVNccM_yMIHfvv1zeutyP705q_eKkMNz2Kfl88DsedcfmjVtFkSBhoD8HPwMGlEN0OEl80Tu0Sh5mw7SiZxRAONFSukDlq4_-T15i8H5UlYDEhfvnWnjUssjjH7IrKMnAi7-5F4Ii0p3Z-7_kidFx22F1bRjQPr_nOyh60V7zSU-POQCn0yt096EWiVd4tuJWPhv_sASzUufibmxt6RwFu2bRvilbWBxZQNx5wcHs4K_28_-eLUcEhgVw9iw6IZ_6agkKgpgh-LX7sEuP2Sw89WnmZW5VmZUz4QgR4IBy_vGYwiDDG6GSBMZECsMxmzayrC7akb0tr-5MDqnBSteXKAf5-jBDW2UcwNx55VB0n5EB7FfsOuumDGEfBTvnQOk=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ros-entrypoint&quot;&gt;ROS Entrypoint&lt;/h2&gt;

&lt;p&gt;According to the error, the system wasn’t able to locate the nodes. According to this &lt;a href=&quot;https://get-help.robotigniteacademy.com/t/ros-basics-in-5-days-c-launching-issues/8499&quot;&gt;answer&lt;/a&gt;, sourcing the workspace resolves the problem, we reasoned that if we could source all of the terminals at the start of the container’s execution, the error would be fixed. Normally, this is accomplished by adding source to the bashrc file, but because each command in Docker runs a different sub-shell, the environment variables are not saved, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file is not sourced. (see this &lt;a href=&quot;https://stackoverflow.com/questions/54961370/dockerfile-an-appended-variable-is-not-persisted-between-run-instructions/54961726#54961726&quot;&gt;answer&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In order to address this issue, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ros_entrypoint.sh&lt;/code&gt; which will allow us to execute the commands for each new sub-shell(see &lt;a href=&quot;https://answers.ros.org/question/356401/is-ros-already-sourced-if-i-do-it-from-a-dockerfile/&quot;&gt;this discussion&lt;/a&gt;). Therfore I created a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;radi-entrypoint.sh&lt;/code&gt; and added all the source commands for ROS into it.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start.sh&lt;/code&gt; was modified as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#!/usr/bin/env bash
# This file is intended to be run from the root
# of the Docker container

# radi-entrypoint's primary purpose is to source the ROS setup files.
source radi-entrypoint.sh
# Start the Django server. Load the list of exercises from db.sqlite3
python3 RoboticsAcademy/manage.py runserver 0.0.0.0:8000 &amp;amp;
# Start RADI
python3.8 manager.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also need ROS environment sourced inside the bash terminal as the console would be used by the student.
The only mention of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; inside the Dockerfile is in the following layer-&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN echo 'source /radi-entrypoint.sh' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After re-building the image, all of the sub-terminals were sourced at the same time, eliminating the need for external sourcing. The bad news was that the same problem was still appearing when running the Mobile Manipulation exercises.&lt;/p&gt;

&lt;h2 id=&quot;pcl-filter&quot;&gt;PCL filter&lt;/h2&gt;

&lt;p&gt;The ROS interface stack PCL (Point Cloud Library). For 3D applications using n-D Point Clouds and 3D geometry processing in ROS, PCL-ROS is the preferred bridge. The PCL filter utilised in Industrial Robots, on the other hand, is a proprietary design. As a result, we won’t be able to just install PCL filters and eliminate the issues. One thing to keep in mind is that, like cob scan unifier, this package generates some warnings when using catkin build. I suspect that this is causing the difficulty in locating the nodes within the packages. As a result, in the following weeks, I’ll strive to resolve these warnings.&lt;/p&gt;

&lt;h2 id=&quot;libgazebo-ros-moveit-planning-scene&quot;&gt;LibGazebo ROS Moveit Planning Scene&lt;/h2&gt;

&lt;p&gt;This is a model plugin which broadcasts MoveIt PlanningScene messages so that the planning scene stays up-to-date with the world simulation. This is useful if you want to “fake” perfect perception of the environment. Yiia found some resources related to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgazebo_ros_moveit_planning_scene&lt;/code&gt;. One of them was describes the function of this plugin(see &lt;a href=&quot;http://docs.ros.org/en/hydro/api/gazebo_plugins/html/group__GazeboRosMoveItPlanningScene.html&quot;&gt;this&lt;/a&gt;) and the other was a &lt;a href=&quot;https://github.com/ros-simulation/gazebo_ros_pkgs/pull/713&quot;&gt;pull request&lt;/a&gt; for adding that plugin in kinetic devel. We set up the workspace and installed the plugin. Finally, the missing plugin error was fixed, however it came with a slew of new issues. Yijia recommended that I uninstall the redundant plugins that were installed during the installation of this plugin because they can conflict with the current custom plugins, causing the issues.&lt;/p&gt;

&lt;h3 id=&quot;mobile-manipulation&quot;&gt;Mobile Manipulation&lt;/h3&gt;

&lt;p&gt;Issue: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/issues/1205&quot;&gt;#1205&lt;/a&gt;
Pull Request: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/pull/1206&quot;&gt;#1206&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;machine-vision-1&quot;&gt;Machine Vision&lt;/h3&gt;

&lt;p&gt;Issue: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/issues/1204&quot;&gt;#1204&lt;/a&gt;
Pull Request: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/pull/1207&quot;&gt;#1207&lt;/a&gt;&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Machine-Vision" /><summary type="html">Machine Vision</summary></entry><entry><title type="html">Week 8</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/08/01/week-8.html" rel="alternate" type="text/html" title="Week 8" /><published>2021-08-01T00:00:00+05:30</published><updated>2021-08-01T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/08/01/week-8</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/08/01/week-8.html">&lt;h2 id=&quot;cob-scan-unifier&quot;&gt;COB Scan Unifier&lt;/h2&gt;

&lt;p&gt;The cob_driver stack includes packages that provide access to the Care-O-bot hardware through ROS messages, services and actions. E.g. for mobile base, arm, camera sensors, laser scanners, etc. However, terminal shows up with error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cannot locate node of type [scan_unifier_node] in package [cob_scan_unifier]. Make sure file exists in package path and permission is set to executable (chmod +x)&lt;/code&gt;. This reason behind this error according to this &lt;a href=&quot;https://github.com/microsoft/AirSim/issues/2591&quot;&gt;post&lt;/a&gt; is sourcing. But since each command runs a separate sub-shell, so the environment variables are not preserved and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; is not sourced. Related stackoverflow &lt;a href=&quot;https://stackoverflow.com/questions/55206227/why-bashrc-is-not-executed-when-run-docker-container&quot;&gt;answer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;libgazebo-ros-moveit-planning-scene&quot;&gt;LibGazebo ROS Moveit Planning Scene&lt;/h2&gt;

&lt;p&gt;Terminal shows up an error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Failed to load plugin libgazebo_ros_moveit_planning_scene.so: libgazebo_ros_moveit_planning_scene.so: cannot open shared object file: No such file or director&lt;/code&gt;. This clearly states that the mentioned plugin isn’t avalialble. However, the identical plugin isn’t even installed on my local PC, and the exercise runs smoothly there. Furthermore, there is no information about this plugin on the internet.&lt;/p&gt;

&lt;h2 id=&quot;testing-machine-vision-exercise&quot;&gt;Testing Machine Vision Exercise&lt;/h2&gt;

&lt;p&gt;The most difficult aspect of this exercise (Machine Vision) is using the Vaccum Gipper to pick up the items. Yijia assisted me in locating the object and carrying out the pick procedure. However, it is still unable to correctly pick the items. I tried adjusting the WIDTH value, but it still doesn’t seem to be picking up the objects correctly. I’ll keep tweaking the parameters till the simulation works as a goal for next week.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLVpkC8B4_wmkksZOXSBeEwRhfDbpCBoguids5Tny6zsKHddu_b6ZENn42O931p2I4B0TCZk5G7ghNIGMMSqtNfroFe9viF7Wwfh3atN2BbO-mrvs2JbJcY_q7eGjuxXZKRe_EAI8YuYGIcFLaRclslb=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLWXkbjALs8fBGXdne-G7xlIYA8YD1ixgdet4OGopo6now9LeZ70zSwiKLKIpFsXRn8XNLJPk3gERO_CHcSwEMGTjHNeyU23UBX4f8lOVUmksFLUcSdRAEyc6eKtGFL9Iec_GEbm4tGAsNvIfzkUoWDJ=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;issues-and-pull-request&quot;&gt;Issues and Pull Request&lt;/h2&gt;

&lt;p&gt;We discussed integrating the pick and place exercise into the Robotics Academy repository during our weekly meeting. But, it seems that a separate pull request is required for integrating Rivz with the exercise, which will make developing new exercises with Rviz capabilities easier. However, because Rviz was already integrated into the Pick and Place exercise, it would be a time-consuming and inefficient task to first de-integrate Rviz from Pick and Place, make a pull request, and then create a pull request incorporating Rviz into the exercises. So, after debating this during the meet, we decided to migrate the Machine Vision exercise without Rviz first, and then add Rviz with a new pull request later.&lt;/p&gt;

&lt;h3 id=&quot;mobile-manipulation&quot;&gt;Mobile Manipulation&lt;/h3&gt;

&lt;p&gt;Issue: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/issues/1205&quot;&gt;#1205&lt;/a&gt;
Pull Request: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/pull/1206&quot;&gt;#1206&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;machine-vision&quot;&gt;Machine Vision&lt;/h3&gt;

&lt;p&gt;Issue: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/issues/1204&quot;&gt;#1204&lt;/a&gt;
Pull Request: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/pull/1207&quot;&gt;#1207&lt;/a&gt;&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="RADI-3" /><category term="Mobile_Manipulation" /><summary type="html">COB Scan Unifier</summary></entry><entry><title type="html">Week 7</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/25/week-7.html" rel="alternate" type="text/html" title="Week 7" /><published>2021-07-25T00:00:00+05:30</published><updated>2021-07-25T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/25/week-7</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/25/week-7.html">&lt;h2 id=&quot;mobile-manipulation-exercise&quot;&gt;Mobile Manipulation Exercise&lt;/h2&gt;

&lt;p&gt;There were several issues that we were facing in the migration of Machine Vision Exercise which are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not only was the object’s position incorrectly recorded, but the shape identified by object shape filter was incorrect as well. And we had no clue why this behaviour was occurring.&lt;/li&gt;
  &lt;li&gt;Yijia also stated that because this exercise employs a vaccum gripper rather than a qrt gripper, he had a lot of trouble replicating the picking mechanism last year because the object would slide out of the vaccum gripper, making the task extremely difficult to accomplish.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We chose to go on to the mobile manipulation exercise, which uses rqt gripper, after considering all of these factors. We intended to finish the mobile manipulation exercise before moving on to machine vision.&lt;/p&gt;

&lt;h2 id=&quot;migration-to-radi-3-or-migration-of-rest-of-the-exercises&quot;&gt;Migration to RADI-3 or Migration of rest of the exercises&lt;/h2&gt;

&lt;p&gt;Instead of moving the rest of the exercises to RADI-2 (Melodic + Python2), Jose Maria proposed that we migrate the existing pick and place exercises to RADI-3 (Noetic + Python3). Rviz, like Gzclient and console for most RADI-3 exercises, can be used as an additional tool in other RADI-3 exercises. This would also act as a feature to the new RADI and future debugging will be a lot easier as one will not have to make the changes in RADI-3 as well as RADI-2(if Rviz is integrated in RADI-2). After considering all of this, my mentors and I agreed, and we met to re-create our weekly goals.&lt;/p&gt;

&lt;p&gt;However, after pulling the RADI-3 docker image and making some adjustments, I discovered that most of the industrial rtobot packages were reporting problems. The reason for this was that these packages were produced with Melodic, and I needed to make some changes to run them on Noetic. But the problem with that I have Melodic installed in my PC on Ubuntu 18.04. So, in order to debug, I’ll have to first instal Ubuntu 20.02, then Noetic, which is not only a time-consuming job, but also one that I can’t just abandon to my ongoing Melodic projects.&lt;/p&gt;

&lt;p&gt;So, after talking with my mentor about it, we decided to keep moving forward with the exercise conversion to web-templates. We may then go on to the RADI-3 migration of exercises after the exercises have been transferred.&lt;/p&gt;

&lt;h2 id=&quot;migration-of-mobile-manipulation-exercise&quot;&gt;Migration of Mobile Manipulation Exercise&lt;/h2&gt;

&lt;p&gt;So, after a lengthy time of deliberation, I returned to coding and began working on the mobile migration exercises migration. I began by writing the simulation’s code. Its navigation functioned properly, but it was unable to pickup the objects. I needed to fine-tune WIDTH since the items were slipping out of the grippers. Fortunately, Yijia had the solution to this exercise, which he had prepared the previous year. When I tested his code, it worked flawlessly.&lt;/p&gt;

&lt;p&gt;After that, I made a card for the Mobile Manipulation exercise and a prototype for the new exercises. The first testing revealed a large number of problems linked to missing packages (mainly navigation packages). Even after installing those packages, there were still two problems that I couldn’t fix.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;Cannot locate node of type [scan_unifier_node] in package [cob_scan_unifier]. Make sure file exists in package path and permission is set to executable (chmod +x)

&amp;gt;Failed to load plugin libgazebo_ros_moveit_planning_scene.so: libgazebo_ros_moveit_planning_scene.so: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first problem indicates that the file requires executable permissions, however this was not resolved even after executing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod +x&lt;/code&gt; command. 
According to the second error, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgazebo ros moveit planning scene&lt;/code&gt; plugin was missing. I looked for it on the internet but couldn’t find anything. What’s strange is that there’s no such issue when I run it locally, and this package doesn’t even exist on my machine.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLUPjyYcBZ2pgHU3GBf8NtpRdToYPzL-wYVhjXUErj2zh5KfDRXsqCORj8KjHixUiP5ptZyovhtY-EKxW9qu0721ev3J68Wpv-hZexkpxJLIWAmXO-jHJKt6FH7qFeUIl7UxwkBjikpKJNu9l187dOWT=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For testing the current exericse, one can pull the &lt;a href=&quot;https://github.com/predator4hack/RoboticsAcademy/tree/mobile_manipulation&quot;&gt;Mobile Manipulation branch&lt;/a&gt; from my repository and use the command&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -it --name=Industrial -v /your/local/repo:/RoboticsAcademy -p 8000:8000 -p 2303:2303 -p 1905:1905 -p 8765:8765 -p 6080:6080 -p 1108:1108 -p 6081:6081 jderobot/robotics-academy:2.4 /RoboticsAcademy/scripts/start.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The git diffs can be checked from &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/compare/melodic...predator4hack:mobile_manipulation?expand=1&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="RADI-3" /><category term="Mobile_Manipulation" /><summary type="html">Mobile Manipulation Exercise</summary></entry><entry><title type="html">Week 6</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/18/week-6.html" rel="alternate" type="text/html" title="Week 6" /><published>2021-07-18T00:00:00+05:30</published><updated>2021-07-18T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/18/week-6</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/18/week-6.html">&lt;h2 id=&quot;pull-request&quot;&gt;Pull Request&lt;/h2&gt;

&lt;p&gt;We had our project evaluation this week, and I had to make a pull request from my local branch to JdeRobot’s master branch in order to do so. To finish this process, I first removed all of the redundant files that had been generated after executing the rsync command from my local branch.&lt;/p&gt;

&lt;p&gt;Commit : &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/commit/288f4d0bf8e6a4ba5a2561058b4ad382194de3ed&quot;&gt;Removed the redundant exercises&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this, I created a &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/pull/1153&quot;&gt;draft pull request&lt;/a&gt; in Robotics Academy repository for the pick and place exercise.&lt;/p&gt;

&lt;h2 id=&quot;machine-vision&quot;&gt;Machine Vision&lt;/h2&gt;

&lt;p&gt;Since my classes are going to get started by the end of July, I started working on to the next exercise which is “Machine Vision”. The first stage was to create the code for simulation of Machine Vision exercise.  I addressed portions of the documentation with Yijia in the weekly meet that I didn’t understand (for example, the radius used in shape filter and how to pick rgb range for the exercise). I developed an example code for conducting machine vision exercises after clarifying all of my doubts.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object_color_filter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object shape filter&lt;/code&gt; were both working fine, and the underlying pcl filter recognised the objects correctly. The results are depicted in the diagram below:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLWhoyj07CEg0Gb8a84t5gc6xoCGbJOn2UN7kVuihCJLiE_aloUwGh_fuBrIYLUxd87-G70XU5TuGQ234fG0GsocfD7LkMclUK-ubOPTOMusUirLzp_4C6baJKy8bioC8gzLqq8cDLvOgR_aFSKqvhQl=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The robot arm, however, was unable to pick up the objects and throws up the error: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AttributeError : 'NoneType' object has no attribute 'x'&lt;/code&gt;. Following further investigation, I discovered that the location of the item identified in the tf frame was incorrect, as seen in the figure below:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLW8SYGVir2sbM-PDMapR_7m8tcBEey2KTIaeTZEaC2jmezWZ36fZJZ5DK0eDNhJsYj6dvtGfvrnhtgwUm9lTtjgUqToLAQC11pndgcEBQJDdY3HARBfV2iS4PCHJ-eu-TH6z1ZS9sexE1EbRZUEfwle=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-review&quot;&gt;Final Review&lt;/h2&gt;

&lt;p&gt;I created the final contributions of the pick and place exercise’s pull request after discussing some of the needed adjustments with my mentors.&lt;/p&gt;

&lt;p&gt;Final Pull Request: &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/pull/1153&quot;&gt;https://github.com/JdeRobot/RoboticsAcademy/pull/1153&lt;/a&gt;&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="First Evaluation" /><summary type="html">Pull Request</summary></entry><entry><title type="html">Week 5</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/11/week-5.html" rel="alternate" type="text/html" title="Week 5" /><published>2021-07-11T00:00:00+05:30</published><updated>2021-07-11T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/11/week-5</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/11/week-5.html">&lt;h2 id=&quot;gazebo_mimic_joint_plugin&quot;&gt;Gazebo_mimic_joint_plugin&lt;/h2&gt;

&lt;p&gt;Mimic joint plugin is a simple (Model) plugin for Gazebo in order to add to Gazebo the mimic joint functionality that exists in URDF (ROS). Last week, the simulation wasn’t operational because of an error related to this plugin. The error shown in the terminal was:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Err] [Plugin.hh:180] Failed to load plugin libroboticsgroup_gazebo_mimic_joint_plugin.so: libroboticsgroup_gazebo_mimic_joint_plugin.so: cannot open shared object file: No such file or directory
[Err] [Plugin.hh:180] Failed to load plugin libroboticsgroup_gazebo_mimic_joint_plugin.so: libroboticsgroup_gazebo_mimic_joint_plugin.so: cannot open shared object file: No such file or directory
[Err] [Plugin.hh:180] Failed to load plugin libroboticsgroup_gazebo_mimic_joint_plugin.so: libroboticsgroup_gazebo_mimic_joint_plugin.so: cannot open shared object file: No such file or directory
[Err] [Plugin.hh:180] Failed to load plugin libroboticsgroup_gazebo_mimic_joint_plugin.so: libroboticsgroup_gazebo_mimic_joint_plugin.so: cannot open shared object file: No such file or directory
[Err] [Plugin.hh:180] Failed to load plugin libroboticsgroup_gazebo_mimic_joint_plugin.so: libroboticsgroup_gazebo_mimic_joint_plugin.so: cannot open shared object file: No such file or directory
[Err] [Plugin.hh:180] Failed to load plugin libgazebo_grasp_fix.so: libgazebo_grasp_fix.so: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As clear from the error message, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libroboticsgroup_gazebo_mimic_joint_plugin&lt;/code&gt; was missing but when I checked the IndustrialRobots repository, I found out that the plugin was already there. In addition, the simulation ran well on my system. After inspecting the env variables, I decided to explicitly define &lt;a href=&quot;https://github.com/predator4hack/RoboticsAcademy/commit/eb743a83ab54d96d37879d8cadb6f48601a0c81b&quot;&gt;plugin path&lt;/a&gt;. So I updated the ‘GAZEBO_PLUGIN_PATH` and guess what, grippers were working now.&lt;/p&gt;

&lt;p&gt;After resolving the issue with the plugins, I took the code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyAlgorithm.py&lt;/code&gt; and modified it according to new HAL APIs. The final video simulation of pick &amp;amp; place of blue sphere is shown below:&lt;/p&gt;

&lt;p&gt;Link to the &lt;a href=&quot;https://youtu.be/1rrcCzl-JWI&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;minutes-of-the-meet&quot;&gt;Minutes of the meet&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Fix the images in the blog&lt;/li&gt;
  &lt;li&gt;Create a branch in IndustrialRobots repo for packages specifically needed for web-templates&lt;/li&gt;
  &lt;li&gt;Update the Docker File and get the pick_place branch ready for testing&lt;/li&gt;
  &lt;li&gt;Fix the reset button&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;images-in-the-blog&quot;&gt;Images in the blog&lt;/h3&gt;

&lt;p&gt;I discovered that my mentors couldn’t see the photos in the blogs. The photographs were not available to others since they were saved in my personal album on Google Photos, which I discovered after checking the URLs. I just changed the photos from personal to shared images to remedy the problem.&lt;/p&gt;

&lt;h3 id=&quot;web-template-branch-in-industrial-robots&quot;&gt;Web-template branch in Industrial Robots&lt;/h3&gt;

&lt;p&gt;Web-template of Pick &amp;amp; Place exercise in Robotics Academy requires model_manager.py and joint_info.yaml to spawn the objects in Gazebo. This was previously done using rqt_kinematics package. And since we are not incluing this package, I decided to create another package inside industrial_robots directory. Yijia suggested me to create another branch named as web-template for addressing this issue. I creted the &lt;a href=&quot;https://github.com/JdeRobot/IndustrialRobots/tree/web-template/industrial_robots/spawn_objects&quot;&gt;spawn_objects&lt;/a&gt; package and pushed it into &lt;a href=&quot;https://github.com/JdeRobot/IndustrialRobots/tree/web-template&quot;&gt;web-template branch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pull Request: &lt;a href=&quot;https://github.com/JdeRobot/IndustrialRobots/pull/18&quot;&gt;#18&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reset-button&quot;&gt;Reset Button&lt;/h2&gt;

&lt;p&gt;While testing the exercise and making the video, I noticed that the arm starts behaving abnormally once I press the reset button. After checking through the exercise.py, I discovered that reset_world was causing this. Therefore, I decided to use &lt;a href=&quot;https://github.com/predator4hack/RoboticsAcademy/blob/pick_place/exercises/pick_place/web-template/env.py&quot;&gt;manual functions&lt;/a&gt; to get the arm move back to HOME position and respawn the objects. Fortunetly, this worked!!&lt;/p&gt;

&lt;h2 id=&quot;how-to-test&quot;&gt;How to test&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone -b pick_place https://github.com/predator4hack/RoboticsAcademy.git
cd RoboticsAcademy/scripts
chmod +x build-2.4.sh
./build-2.4.sh &amp;lt;tag&amp;gt; 
docker run --rm -it -p 8000:8000 -p 2303:2303 -p 1905:1905 -p 8765:8765 -p 6080:6080 -p 1108:1108 -p 6081:6081 jderobot/robotics-academy:&amp;lt;tag&amp;gt; /start.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Simulation" /><category term="Reset" /><summary type="html">Gazebo_mimic_joint_plugin</summary></entry><entry><title type="html">Week 4</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/04/week-4.html" rel="alternate" type="text/html" title="Week 4" /><published>2021-07-04T00:00:00+05:30</published><updated>2021-07-04T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/04/week-4</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/04/week-4.html">&lt;h2 id=&quot;rqt-widget&quot;&gt;RQT Widget&lt;/h2&gt;

&lt;p&gt;The bug mentioned last week hasn’t been fixed yet, and it’s nearly put the project on hold. To avoid this, I chose to focus on other projects so that the project could continue to progress. I chose to concentrate on the widget because working with Rviz required first connecting the exercise. The final widget looked like this:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLWEhzhda1TzhqwBUsFaTbzGvaKM0AjVxm1SPWOZmw0cINRSo055c7ky7wWF5y3MfYh13WutRk9yeq8ypNBSiEZ8uZ9zIv_HaIpcAH4Eg_HcTDtSus-AoE3MsDi2gMJKCxAhkSCXWPBZhq4OrC1FxLpS=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connection-with-the-server&quot;&gt;Connection with the server&lt;/h2&gt;

&lt;p&gt;The issue we were facing was “Address already in use,” which means the server was either configured twice or there was a conflict while connecting the ws client and server because they both utilise the same port. I made some changes to exercise.py (removing the unnecessary routines related to GUI.py) and wolllaahh!!, the exercise was connected.&lt;/p&gt;

&lt;h2 id=&quot;minutes-of-the-meet&quot;&gt;Minutes of the meet&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Start working on getting the Rviz in our exercise.&lt;/li&gt;
  &lt;li&gt;Debug the simulation of pick and place exercise&lt;/li&gt;
  &lt;li&gt;Create the rest of HAL APIs&lt;/li&gt;
  &lt;li&gt;Finalize the exercise and push the changes to the master branch before first evaluation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rviz&quot;&gt;Rviz&lt;/h2&gt;

&lt;p&gt;We decided to utilise Rviz instead of a widget after connecting the exercise to the server. Thanks to Siddharth, who had previously integrated Rviz into his project, working on Rviz was a lot easier for me. Not to mention, the diffs were created systematically to emphasise the essential adjustments, ensuring that the task went off without a hitch. The only thing I needed to do was resize the Rviz display to fit in the VNC window. This was readily accomplished by altering the rviz configuration files. One of the other minor errors I encountered was that the objects in the rviz weren’t spawning properly. After some investigation, I discovered that the time between the two threads was insufficient, which explains the issue with spawning the objects. A different thread with a longer elapsed period did an excellent job of spawning.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLVy7tfZAGdFhCIkDbZfRDDPHNjbjZIVUJ3RR-unqXBkax5iwzI111jcjPtOc0WQ-UnFJKu4vUsojwXC1JB_PKtTxbGiAS8I68_uzaXbtDTDPpcAp2nmiD4fIYWyMd6iAWdzUlkn_J0mPlax0r3TChkS=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hal-apis&quot;&gt;HAL APIs&lt;/h2&gt;

&lt;p&gt;Initially, some of the HAL APIs weren’t working properly. After some debugging, the APIs were found to be fully functional.&lt;/p&gt;

&lt;h2 id=&quot;gazebo-simulation&quot;&gt;Gazebo Simulation&lt;/h2&gt;

&lt;p&gt;The next step was to get the simulation up and running. This should not have taken long, however due to bugs, we have yet to get the simulation to operate. The bug is most likely caused by a missing gazebo plugin(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libroboticsgroup_gazebo_mimic_joint_plugin&lt;/code&gt;). I’m hoping we’ll be able to fix this bug as well and finish our exercise by the end of the week.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLVrCmeRvGxRnGP40QaA5WQdnPX0De_BV3QGxy91hnwIVz0VQ5A-a7qZJtfdE-RQGGnjg8mH-HhpEfMZ9oyTSVTig0o9y51VxyxC-YBsUNokhFLpSazu8b1a4fRMMNdLRIsEiPeHcmEG42UTa6INSKJX=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Widget" /><category term="Rviz" /><summary type="html">RQT Widget</summary></entry><entry><title type="html">Week 3</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/27/week-3.html" rel="alternate" type="text/html" title="Week 3" /><published>2021-06-27T00:00:00+05:30</published><updated>2021-06-27T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/27/week-3</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/27/week-3.html">&lt;h2 id=&quot;apis&quot;&gt;APIs&lt;/h2&gt;

&lt;p&gt;Robotics Academy is a web-based learning platform for robotics that abstracts other ROS operations. It accomplishes this by utilising APIs that handle all of the work behind the scenes. There are three types of APIs defined: GUI, HAL, and ENV. The details of these APIs are covered in the following sections.&lt;/p&gt;

&lt;h3 id=&quot;hal&quot;&gt;HAL&lt;/h3&gt;

&lt;p&gt;HAL(Hardware Abstraction Layer) APIs are used to interact with robot which means one can send commands to different parts of robot using these APIs. Pick and Place exercise requires the following HAL APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;move_pose_arm(pose_goal) : Command the robot with Pose message to make its end effector frame move to the desired pose with inverse kinematics.&lt;/li&gt;
  &lt;li&gt;move_joint_arm(joint_0,joint_1,joint_2,joint_3,joint_4,joint_5) : Command the robot joints to move to desired joints value&lt;/li&gt;
  &lt;li&gt;move_joint_hand(joint_value) : Command the gripper joint to move to desired joint value.&lt;/li&gt;
  &lt;li&gt;back_to_home() : Command the robot arm and gripper to move back to the home pose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;env&quot;&gt;ENV&lt;/h3&gt;

&lt;p&gt;ENV APIs are used to get the information about the objects present in the world/enviornment. These APIs also containes the helper functions that are useful to complete the exercise.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get_object_list() : Return the name list of all objects.&lt;/li&gt;
  &lt;li&gt;get_object_pose(object_name) : Return the pose of the object.&lt;/li&gt;
  &lt;li&gt;get_object_info(object_name) : Return the pose, height, width, length, shape, color of the object in order.&lt;/li&gt;
  &lt;li&gt;get_target_list() : Return the name list of all targets.&lt;/li&gt;
  &lt;li&gt;get_target_position(target_name) : Return the position of target where we are going to place the objects.&lt;/li&gt;
  &lt;li&gt;pose2msg(roll, pitch, yaw, x, y, z) : Convert pose to Pose message. The unit of roll, pitch, yaw is radian.&lt;/li&gt;
  &lt;li&gt;msg2pose(pose) : Convert Pose message to pose, return roll, pitch, yaw, x, y, z in order. The unit of roll, pitch, yaw is radian.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since in the process of connecting the exercises, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manager.py&lt;/code&gt; checks through these APIs, so I thought of creating them in the begining of this week. Also, this exercise doesn’t need GUI so there is no need of GUI APIs but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI.py&lt;/code&gt; contains some functions related to threads that I’m still not sure about and they could be contributing to the connection of exercises. As a result, I’ve temporarily replaced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI.py&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV.py&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;gazebo-path-errors&quot;&gt;Gazebo path errors&lt;/h2&gt;

&lt;p&gt;Following the creation of the APIs, I moved on to connecting the exercise to the server. I tried to connect after making some changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exercise.py&lt;/code&gt;, but I came across a very unpleasant problem. The compiller wasn’t able to identify “pick_place” key in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instructions.json&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gazebo_path = self.GAZEBO_RESOURCE_PATH + self.instructions[exercise][&quot;gazebo_path&quot;] + &quot;;&quot;
KeyError: 'pick_place'
_XSERVTransmkdir: ERROR: Cannot create /tmp/.X11-unix
_XSERVTransSocketUNIXCreateListener: mkdir(/tmp/.X11-unix) failed, errno = 17
_XSERVTransMakeAllCOTSServerListeners: failed to create listener for unix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It appears to be very simple problem where one just needs to add the paths in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instructions.json&lt;/code&gt; but the problem was that I added the paths right from the start.&lt;/p&gt;

&lt;p&gt;I was finally able to figure out the problem after a lot of testing. Actually, the compiler wasn’t compiling the code I edited; instead, it made a copy of manager.py and instructions.json in the root directory, which it then executed. The changes in my local repository didn’t effect other files because I mounted it with the RoboticsAcademy repository in the container. So, in the end, I updated the root directory’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instructions.json&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;radi-23-or-242&quot;&gt;RADI 2.3 or 2.4.2&lt;/h2&gt;

&lt;p&gt;After resolving some more XML errors, I ran into another major error. ROS wasn’t able to find the Industrial Robots packages cloned in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/jderobot&lt;/code&gt; along with Custom Robots directory.  I tried changing the ROS PACKAGE PATH variable, but it didn’t help. I decided to put these packages in a catkin workspace after browsing the internet for a bit. However, there was no catkin workspace in RADI2.3, but there is in RADI2.4. So I had the option of creating a catkin workspace or upgrading to RADI2.4.2. I decided to use RADI2.4.2 after consulting with my mentor. I successfully moved on to RADI2.4.2 after making few adjustments in Dockerfile2.4.2 and manager.py.&lt;/p&gt;

&lt;p&gt;Finally, up until debugging level 4, the exercise was able to connect (simulation started and code and gui websockets opened). The gazebo was operational, and all of the objects, including the robot, were properly spawned.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLVAHQnlCe5SFdGpcGFlCPZUS_kWyT3qXGwwkRLEklqAfo6mVvlIPjNR8ILKDsgNqNY1Xw668QadojhPwxr4_Kv4BwrXn2S7UjKsW58lW5eom4rjBGDNjyVFrA4mQpnePzb42lKNHUS3D8rtzchjijoN=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although the gazebo is working, there are still some warnings and errors which are needed to be resolved.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Err] [ModelDatabase.cc:390] Unable to parse model.config for model[http://gazebosim.org/models/bin_4_dropping_task]
Failed to load plugin libroboticsgroup_gazebo_mimic_joint_plugin.so: libroboticsgroup_gazebo_mimic_joint_plugin.so: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, we are still a step away from fully connecting our exercise. The connection with code websocket is still not working, and the shell displays the following error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback (most recent call last):
File &quot;/RoboticsAcademy/exercises/pick_place/web-template/exercise.py&quot;, line 351, in &amp;lt;module&amp;gt;
    server.run_server()
File &quot;/RoboticsAcademy/exercises/pick_place/web-template/exercise.py&quot;, line 341, in run_server
    self.server = WebsocketServer(port=1905, host=self.host)
File &quot;/usr/local/lib/python2.7/dist-packages/websocket_server/websocket_server.py&quot;, line 97, in __init__
    TCPServer.__init__(self, (host, port), WebSocketHandler)
File &quot;/usr/lib/python2.7/SocketServer.py&quot;, line 420, in __init__
    self.server_bind()
File &quot;/usr/lib/python2.7/SocketServer.py&quot;, line 434, in server_bind
    self.socket.bind(self.server_address)
File &quot;/usr/lib/python2.7/socket.py&quot;, line 228, in meth
    return getattr(self._sock,name)(*args)
socket.error: [Errno 98] Address already in use
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s evident that ws code has several issues, and I’ll be fixing them and working on the widget/Rviz in the coming week.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Gazebo" /><category term="launchfile" /><summary type="html">APIs</summary></entry><entry><title type="html">Week 2</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2.html" rel="alternate" type="text/html" title="Week 2" /><published>2021-06-20T00:00:00+05:30</published><updated>2021-06-20T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2.html">&lt;h2 id=&quot;version-control&quot;&gt;Version Control&lt;/h2&gt;

&lt;p&gt;This week didn’t start out the way I had planned, but it did teach me a valuable lesson about the significance of version control! I was working on adding gazebo to the exercise when I came upon this. I realised that the existing exercises didn’t seem to work properly. The reason for this is yet unknown, although it was most likely caused by two or more exercises requesting the same port in the websocket server. And things became even worse when I realised I hadn’t been committing to my changes for a few days. As a result, I had to restart the work from the begining.&lt;/p&gt;

&lt;p&gt;As I was going through the process of creating a new exercise, I figured out the solution for the problems that we were having with exercise connectivity and dockerfile. Previously, when I mounted the container’s repository with a local repository, the exercises weren’t unable to connect. The reason for this was due to the change in structure of repository caused by usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN rsync -a --exclude 'ace-builds' /RoboticsAcademy/exercises/static/exercises/* /RoboticsAcademy/exercises&lt;/code&gt; command used in the dockerfile. A temproary solution which I earlier went with was to change the path of each exercise manually in the &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/blob/master/scripts/instructions.json&quot;&gt;instructions.json&lt;/a&gt; but this might create merge conflicts. A better way of resolving this is to just use the same rync command after bind mount in the local repository. This will change the directory structure according to the paths in the instruction.json file. The same command can be used after the exercise has been created to structure  according to the original repository.&lt;/p&gt;

&lt;h2 id=&quot;launch-file-for-gazebo&quot;&gt;Launch file for Gazebo&lt;/h2&gt;

&lt;p&gt;I started working on our launch file after studying other exercises. Except for the point where the Kinematic Widget was called, this was going to be largely similar to the launch file of the ROS Node template. So I decided to include this widget in the html page and semd the commands to gazebo using roslibjs. This way, I’ll have to rewrite all of the interface functions, including GUI and HAL. However, it appears that I do not need to perform all of this and that simply using rqt will suffice. I’m not sure about this method, and we’ll talk about it in the next meeting.&lt;/p&gt;

&lt;h2 id=&quot;set-up-automated-build-on-docker-hub&quot;&gt;Set Up Automated Build on Docker Hub&lt;/h2&gt;

&lt;p&gt;Following discussions with mentors, we decided to use automated build for the industrial robots repo, so that the Docker hub can automatically generate images from source code in the pick &amp;amp; place branch and push the finalized image to the Docker repo. Others will be able to readily access the images with the most recent modifications in the exercise.&lt;/p&gt;

&lt;p&gt;However, there isn’t any official documentation on multi-stage builds on Docker Hub. I tried a few different approaches, such as using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./build.sh&lt;/code&gt; or building both images separately, but none of them worked. So we still have to figure out a way to get this working.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Gazebo" /><category term="Rviz" /><category term="Git" /><summary type="html">Version Control</summary></entry><entry><title type="html">Week 1</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1.html" rel="alternate" type="text/html" title="Week 1" /><published>2021-06-14T00:00:00+05:30</published><updated>2021-06-14T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1.html">&lt;h2 id=&quot;pyqt5-gui&quot;&gt;PyQt5 GUI&lt;/h2&gt;

&lt;p&gt;This is the first week of coding period, so I started with designing UI for the web-templates. I began by making a simple PyQt5 GUI for a pick-and-place exercise.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pypi.org/project/PyQt5/&quot;&gt;PyQt5&lt;/a&gt; is a comprehensive set of Python bindings for Qt v5. It is implemented as more than 35 extension modules and enables Python to be used as an alternative application development language to C++ on all supported platforms including iOS and Android.&lt;/p&gt;

&lt;p&gt;Since the pick and place exercise necessitates heavy use of Gazebo and Rviz, I positioned their displays side by side so that users would not experience difficulty scrolling or changing tabs. The basic design of a GUI is seen in the figure below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLWx2n5MObEVKrncL5s_B7nPFv2eOjukyPI9xXUSshKFViKBIj-ycHhLrHhFJwB_gKJm2IpHeVNYU_B5NZdgkuaoAXzqj2LOOBEKNnymqVAZqpOPZFnkE5VptXJ_ZZ29kaMOK05cgf1yScJ1CeumRdzK=w1093-h838-no?authuser=0&quot; width=&quot;400&quot; height=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since Robotics Academy has shifted to web-templates, we will no longer be working on PyQt5 GUIs and will instead focus on improving the web-templates of current exercises.&lt;/p&gt;

&lt;h2 id=&quot;adding-cards-for-pick-and-place-exercise&quot;&gt;Adding cards for pick and place exercise&lt;/h2&gt;

&lt;p&gt;To include a new exercise, one needs to add the folder with the exercise contents in exercises/static/exercises following the file name conventions. Then, create the entry in db.sqlite3. A simple way to do this is by using the Django admin page:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run python3.8 manage.py runserver.&lt;/li&gt;
  &lt;li&gt;Access http://127.0.0.1:8000/admin/ on a browser and log in with “user” and “pass”.&lt;/li&gt;
  &lt;li&gt;Click on “add exercise” and fill the fields: exercise id (folder name), name (name to display), state, language and description (description to display). Save and exit.&lt;/li&gt;
  &lt;li&gt;Commit db.sqlite3 changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLVrF3YhZwbceQKJyHGylb7zUgWt_DlFMvD9puJkHnC3WFEV1i2Q797SwGwnJ5Mq41iAbLRN01vGW8kZ_2xdo_N5voI7qx-D83xYY2kG6jmxNWkVe99TLG5098JqSEbVrp01ezhNT2BPARuLbCOSxcLC=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-interface-for-pick-and-place-exercise&quot;&gt;User Interface for pick and place exercise&lt;/h2&gt;

&lt;p&gt;I began working on the exercise’s User Interface after generating a card for pick and place. In this exercise, we have two options: we may use a Rviz display or we can abstract all of Rviz’s functions and develop an Industrial Robot Teleoperator that just provides the functionality required by the exercise, such as forward and inverse kinematics. We intend to use Rviz because other exercises may require it.&lt;/p&gt;

&lt;p&gt;The pick and place exercise is depicted in the image below. Rviz, on the other hand, has yet to be exposed on a VNC display. Following a discussion with my mentors, we agreed to make this a higher priority and get it up and running within the next week.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLUFxSNYpdnPtqpaNu98OJ-V_SQJCEEwZ-pKYSrgJVvaV6DDJlHBKEvD5529VLnQdcnTH53Cc9IRPt9E1EjZ9_Y_WlvLDtWDbupIYKp3u5ottIzNZdULs2HL2Cmcdbnei9ixN5bsK_0K1HUeBp0qdn7f=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-the-current-work-on-docker-hub&quot;&gt;Update the current work on docker hub&lt;/h2&gt;

&lt;h2 id=&quot;meet-1&quot;&gt;Meet 1&lt;/h2&gt;

&lt;p&gt;Minutes of the meet:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a docker image, upload it on docker hub, and mention the details in week 1 blog.&lt;/li&gt;
  &lt;li&gt;Incorporate Gazebo in the current template&lt;/li&gt;
  &lt;li&gt;Incorporate Rviz in the current template&lt;/li&gt;
  &lt;li&gt;Notify once blog is updated on the slack channel&lt;/li&gt;
&lt;/ul&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="PyQt5" /><category term="Frontend" /><category term="UI/UX" /><category term="Meet" /><summary type="html">PyQt5 GUI</summary></entry><entry><title type="html">Community Bonding Week 2-3</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3.html" rel="alternate" type="text/html" title="Community Bonding Week 2-3" /><published>2021-06-06T00:00:00+05:30</published><updated>2021-06-06T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3.html">&lt;h2 id=&quot;docker-bind-mount&quot;&gt;Docker Bind Mount&lt;/h2&gt;

&lt;p&gt;The first step in starting development in a docker container is to use bind mounts or volumes so that the changes in the docker container can be seen without having to rebuild the image. Bind mounts can be used to create side-by-side development environments and also to share data that needs to persist longer than the lifespan of the docker container.&lt;/p&gt;

&lt;p&gt;When you use a bind mount, a file or directory on the host machine is mounted into a container. The file or directory is referenced by its absolute path on the host machine. By contrast, when you use a volume, a new directory is created within Docker’s storage directory on the host machine, and Docker manages that directory’s contents.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://docs.docker.com/storage/images/types-of-mounts-volume.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;warnings-and-errors&quot;&gt;Warnings and errors&lt;/h3&gt;

&lt;h4 id=&quot;ros-gpg-key-expiration&quot;&gt;ROS GPG Key Expiration&lt;/h4&gt;

&lt;p&gt;ROS GPG keys inadvertently expired and caused apt failures for a number of users. A full description of the security breach and the remediation can be found in this &lt;a href=&quot;https://discourse.ros.org/t/new-gpg-keys-deployed-for-packages-ros-org/9454&quot;&gt;ROS Discourse post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To fix this issue one will need to update the public key used for ROS apt repositories. To do this for ROS 1 installations you need to run a single command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/commit/842c0758a856c7119b6435fc8f17907bd17fdab1&quot;&gt;commit&lt;/a&gt; has been created in order to fix this issue.&lt;/p&gt;

&lt;h4 id=&quot;rle-exception&quot;&gt;RLE Exception&lt;/h4&gt;

&lt;p&gt;After successfully mounting the container with my local repository, I discovered that none of the exercises are connecting to the server and following error was displayed:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLE Exception: [./RoboticsAcademy/exercises/follow_line/web-template/launch/simple_line_follower_ros_headless.launch] is not a launch file name The traceback for the exception was written to the log file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After altering the GAZEBO_RESOURCE_PATH and paths in instruction.json, the error was rectified.&lt;/p&gt;

&lt;h2 id=&quot;gazeboweb-testing&quot;&gt;GazeboWeb Testing&lt;/h2&gt;

&lt;p&gt;Robotics Academy uses GazeboWeb as a front-end graphical interface to gzserver which provides visualization of the simulation. Gzweb lets you interact with the simulation from the comfort of a web browser. This means cross-platform support, minimal client-side installation, and support for mobile devices.&lt;/p&gt;

&lt;p&gt;To learn how Gzweb works, I made a basic webpage, connected it to ROS with rosbridge server, and used the roslibjs package  to drive turtlebot3 around in a circle.  A short video below demonstrates the moving turtlebot after recieving commands from html page.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLUExUWeJ07sANryG5iLw4Yrw3My1KFlPTPFo56h2mg4GuIs6t4ERUSDNgqgBRNg_av86pfzrOoRcAMJj9buCCYk2KtxnSgydxoaScBWM5ejuT5vmRaOFd5FXX8eb6gYU4gHqMlaIGnxDMS23eu5H3mR=w600-h338-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rvizweb-testing&quot;&gt;RvizWeb Testing&lt;/h2&gt;

&lt;p&gt;Rviz is required for Industrial Robot exercises, and RviWeb is one method for incorporating Rviz into a web page. RVizWeb provides a convenient way of building and launching a web application with features similar to RViz. This &lt;a href=&quot;https://github.com/osrf/rvizweb&quot;&gt;documentation&lt;/a&gt; contains further information on RvizWeb.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLXUEAPJZYcmgrdU23qWpVtYc2QINwzIuzpXTdk9dbEkCabpfiEopWEVeS_8h1edXU8YtRDLzdCA1aS1fRzmUUFo-azwK9XEbexDYGN5rk7Hag9n4M9vBVmUTWkVMT5nAYqSCnv9Iogny2H86jB96r6L=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-bullet-for-collision-checking&quot;&gt;Using Bullet for Collision Checking&lt;/h2&gt;

&lt;p&gt;According to the project proposal, we planned to use bullet for collision checking. Bullet has continuous collision capabilities. This means that it can be guaranteed that no collision occurs during the transition between two discrete robot states with the environment.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/pw/AM-JKLUEpYYenDIruLMOpAVdq2xsRbZ_AKoLQJgkjng3pMnLiGnftQ55jzgtlabnDvegoo4incRxIDGqASzfFxU9c8QQjJFyo_5_IazraZXcrBlHQAfQKX-5iSNXq8pPY4iubyDmB1Mo3euRsjeySXT12Xaf=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bullet’s only drawback is that it is not compatible with all versions. Bullet is a ROS1-Noetic and ROS2-Foxy. I also discovered that the bullet took a long time to compute the place of collision (much slower than using traditional non-continuous collision). As a result, I feel we can put the process of adding bullets into the industrial robot exercise on hold until we get to Noetic.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="community bonding" /><category term="docker" /><category term="Rvizweb" /><category term="Gzweb" /><summary type="html">Docker Bind Mount</summary></entry></feed>