<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/feed.xml" rel="self" type="application/atom+xml" /><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/" rel="alternate" type="text/html" /><updated>2021-07-07T07:27:31+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/feed.xml</id><title type="html">GSoC 2021 Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>predator4hack</name></author><entry><title type="html">Week 4</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/04/week-4.html" rel="alternate" type="text/html" title="Week 4" /><published>2021-07-04T00:00:00+05:30</published><updated>2021-07-04T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/04/week-4</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/07/04/week-4.html">&lt;h2 id=&quot;rqt-widget&quot;&gt;RQT Widget&lt;/h2&gt;

&lt;p&gt;The bug mentioned last week hasn’t been fixed yet, and it’s nearly put the project on hold. To avoid this, I chose to focus on other projects so that the project could continue to progress. I chose to concentrate on the widget because working with Rviz required first connecting the exercise. The final widget looked like this:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/0rshluuy6dFGqYvLS0em6gos3BR2JlOlGMF7t8VoJlinMTTb781eABae37JDddLeRfNyLF6QRaN04cj7jGlI_Bpbh7Jr3FvRsamShvYkuC0e0WzN7QkDjzAbiiCYN7UPVxb3-T_x8IaBHAmBEAXkH2VHBFakRXzJT0tBlifao3k_QBFh0oE0l4P9Ad3h8iDlYDwY75mri-FfVj2EnIJBv4HHY1Tg8anBwl47eFPcxVx11VTKqG__VmyvSEetgCnShV-MRYEVvCd3DiZDdv5zXWxovjtDLIL3fnj4GH6cdIWv2aMA42KbmUHp0Ra3MMoYjkvQVykW3gP3maTKcoCG9hra1yggcufMc36CtFWbbv8h82qirBIwJpeCgzrp1NXq7cA1z5nt-Cb3HIixPDOFx5YZ3TE5bd1RTOFaM0Y69N593c0TrzdfZvYhE5J8anmNIbT5y844M47UAjMX4ezC50wawkJrWzvmVDLm4jxhHZhL8NSuYr-3OOu3VKdN0H0CEuwdfoWW17CgOK0bSEtCjKCDg5TH1s_3JPAcTK_4LKmAwKVKWOmbNgGLQ2zmIHk0Se_aOLnZy7J2ysw2ogCYRH8vxnZXqAWE6YFxE0_2WBcvergUaBQz1YwVJKrWGsE_9m10WotmpLenFy1XbdaEGXamUzzAVv9StJVoJ-pJpCXFydepeyVUs2XtHf6FMlreEf5ySink_9I6XzPhXvOEcRA=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connection-with-the-server&quot;&gt;Connection with the server&lt;/h2&gt;

&lt;p&gt;The issue we were facing was “Address already in use,” which means the server was either configured twice or there was a conflict while connecting the ws client and server because they both utilise the same port. I made some changes to exercise.py (removing the unnecessary routines related to GUI.py) and wolllaahh!!, the exercise was connected.&lt;/p&gt;

&lt;h2 id=&quot;minutes-of-the-meet&quot;&gt;Minutes of the meet&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Start working on getting the Rviz in our exercise.&lt;/li&gt;
  &lt;li&gt;Debug the simulation of pick and place exercise&lt;/li&gt;
  &lt;li&gt;Create the rest of HAL APIs&lt;/li&gt;
  &lt;li&gt;Finalize the exercise and push the changes to the master branch before first evaluation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rviz&quot;&gt;Rviz&lt;/h2&gt;

&lt;p&gt;We decided to utilise Rviz instead of a widget after connecting the exercise to the server. Thanks to Siddharth, who had previously integrated Rviz into his project, working on Rviz was a lot easier for me. Not to mention, the diffs were created systematically to emphasise the essential adjustments, ensuring that the task went off without a hitch. The only thing I needed to do was resize the Rviz display to fit in the VNC window. This was readily accomplished by altering the rviz configuration files. One of the other minor errors I encountered was that the objects in the rviz weren’t spawning properly. After some investigation, I discovered that the time between the two threads was insufficient, which explains the issue with spawning the objects. A different thread with a longer elapsed period did an excellent job of spawning.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/o2IXzy3Cj71FJqQ8telDRsn0vS-Vof5xeds2EiP8IawZlto_5eBEfVMIq1FxaDDic6Wwt2J3lF8Zyx8_iqBvjeZ65HAZpiRqoFwXcqg3xjYto7lH9qAY4VLk9fdwqWP3fbpI1_Ler4hjVfmox3SpLzNKJfEHxFqnZioOqj_1eZCMzZHDF8668Ar6cAZce09rOIT5p2X4Cfzan09LYed38Q4AyxI_KTsety6ftBOzPWYi7SuBway7cJgAsctEMVhDMy4PH6XheJfEcKv45DJ9mQmNoy7K7Cs8FKMvgkEvhRDc4HbPNitievU_ePsRTS16duvO5Qaz0rWv0In8qY_ksKA07vsil05sCOcNrXuhgzn7lFpP6YP3i_6oomGKHvDghI4WHmeddMlv4vkzX1f-8s2WeaAJlvtTzXAW71OGf5UZkVPNN4idthaAV9jxtI4nnIv304_Vbflqgu1BmTTJyP-hJNYvVcbNf3ZpqHfrZrq_ekkjxmMNzUaFiVkDQS4jvHuR_ubuUymlEQLmmbd4bGf4_6QfPiLM94mFBaaiE5SsoX0HBLePgAVnujUMCA2kmEmwQafW5csZ1RYqV7X2tysx7VvUW1eOeNL5DNY-DPO6fjpspVU_KAqTCtY0nXq6cfmuwS83hXIMpKSa29_PVkocje3Pa-3OZ3jCZJkwWWx3SDEScCvEN1QuUYkz9xj6O84fMPaM_l-APLmp9c6v5-U=w615-h346-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hal-apis&quot;&gt;HAL APIs&lt;/h2&gt;

&lt;p&gt;Initially, some of the HAL APIs weren’t working properly. After some debugging, the APIs were found to be fully functional.&lt;/p&gt;

&lt;h2 id=&quot;gazebo-simulation&quot;&gt;Gazebo Simulation&lt;/h2&gt;

&lt;p&gt;The next step was to get the simulation up and running. This should not have taken long, however due to bugs, we have yet to get the simulation to operate. The bug is most likely caused by a missing gazebo plugin(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libroboticsgroup_gazebo_mimic_joint_plugin&lt;/code&gt;). I’m hoping we’ll be able to fix this bug as well and finish our exercise by the end of the week.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/t4NXiPeiLctyI7gzJR-U5Kcmqo1DyVyBfb9z6GLY1zTDmS5uv0lvv0tm6yFglBlL8KAoZLLYMN4uvrWoGSR4TtalA8cChB3fXvzMs4B_kfsbLJ7kPnTFTsjy9M_FhTMxU3wk3psBoObEWx7YPDuSkAVpcc52IxKprizSJPeW0bqBwKyfXZCdnfx02HTc5nQN9RfHeGXyWjWf6PqfyR9XtyqgNd7pDTTPDx2H0WTkazzpupyB05SMAlg46FvSJ8RILhe9gvIY2Kb2WP_SqcTxxMrh6ViFvxTZ6vp57SQy9qwJrkK2BfmGAxFCM5KBeKUt8JxBhWxR_wGZxzUSwi1f6otx5oURx_2OnBSuBTjapkKmXwK__DGMk-loa_i7NUCbBuIfHmeig4ONe9jNjNnj_84SzoO9XX4jbeWmfm-kTXNhB0Fd1oMIWLFUM_8QbvMEkatTsbh-5AeTMHDsnrtnkDPA4WpO1bxTn1nNWap8gitLK7KanwPtxjywKcUOfj808OdUs9BhWH2NrofSMA7oQCa6ohfSdK2I_W0YwZx04AeM8oR5QcORKsl7o3ixHyuTqH_8hUH9ynMnKNXOnGM-5T6l47Nisj6y85gdKT55R-DUDdg7Z1KQ0CtIY1fIBhfcs22-pQfe766dns0QVXH5G_fvIeDju0VPgEuc_jUfsTWcIi_3JDuazjsDxmxT-B3LOenp-QVO650FSo3L04n8uzE=w1605-h903-no?authuser=0&quot; /&gt;&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Widget" /><category term="Rviz" /><summary type="html">RQT Widget</summary></entry><entry><title type="html">Week 3</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/27/week-3.html" rel="alternate" type="text/html" title="Week 3" /><published>2021-06-27T00:00:00+05:30</published><updated>2021-06-27T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/27/week-3</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/27/week-3.html">&lt;h2 id=&quot;apis&quot;&gt;APIs&lt;/h2&gt;

&lt;p&gt;Robotics Academy is a web-based learning platform for robotics that abstracts other ROS operations. It accomplishes this by utilising APIs that handle all of the work behind the scenes. There are three types of APIs defined: GUI, HAL, and ENV. The details of these APIs are covered in the following sections.&lt;/p&gt;

&lt;h3 id=&quot;hal&quot;&gt;HAL&lt;/h3&gt;

&lt;p&gt;HAL(Hardware Abstraction Layer) APIs are used to interact with robot which means one can send commands to different parts of robot using these APIs. Pick and Place exercise requires the following HAL APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;move_pose_arm(pose_goal) : Command the robot with Pose message to make its end effector frame move to the desired pose with inverse kinematics.&lt;/li&gt;
  &lt;li&gt;move_joint_arm(joint_0,joint_1,joint_2,joint_3,joint_4,joint_5) : Command the robot joints to move to desired joints value&lt;/li&gt;
  &lt;li&gt;move_joint_hand(joint_value) : Command the gripper joint to move to desired joint value.&lt;/li&gt;
  &lt;li&gt;back_to_home() : Command the robot arm and gripper to move back to the home pose.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;env&quot;&gt;ENV&lt;/h3&gt;

&lt;p&gt;ENV APIs are used to get the information about the objects present in the world/enviornment. These APIs also containes the helper functions that are useful to complete the exercise.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get_object_list() : Return the name list of all objects.&lt;/li&gt;
  &lt;li&gt;get_object_pose(object_name) : Return the pose of the object.&lt;/li&gt;
  &lt;li&gt;get_object_info(object_name) : Return the pose, height, width, length, shape, color of the object in order.&lt;/li&gt;
  &lt;li&gt;get_target_list() : Return the name list of all targets.&lt;/li&gt;
  &lt;li&gt;get_target_position(target_name) : Return the position of target where we are going to place the objects.&lt;/li&gt;
  &lt;li&gt;pose2msg(roll, pitch, yaw, x, y, z) : Convert pose to Pose message. The unit of roll, pitch, yaw is radian.&lt;/li&gt;
  &lt;li&gt;msg2pose(pose) : Convert Pose message to pose, return roll, pitch, yaw, x, y, z in order. The unit of roll, pitch, yaw is radian.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since in the process of connecting the exercises, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manager.py&lt;/code&gt; checks through these APIs, so I thought of creating them in the begining of this week. Also, this exercise doesn’t need GUI so there is no need of GUI APIs but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI.py&lt;/code&gt; contains some functions related to threads that I’m still not sure about and they could be contributing to the connection of exercises. As a result, I’ve temporarily replaced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI.py&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV.py&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;gazebo-path-errors&quot;&gt;Gazebo path errors&lt;/h2&gt;

&lt;p&gt;Following the creation of the APIs, I moved on to connecting the exercise to the server. I tried to connect after making some changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exercise.py&lt;/code&gt;, but I came across a very unpleasant problem. The compiller wasn’t able to identify “pick_place” key in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instructions.json&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gazebo_path = self.GAZEBO_RESOURCE_PATH + self.instructions[exercise][&quot;gazebo_path&quot;] + &quot;;&quot;
KeyError: 'pick_place'
_XSERVTransmkdir: ERROR: Cannot create /tmp/.X11-unix
_XSERVTransSocketUNIXCreateListener: mkdir(/tmp/.X11-unix) failed, errno = 17
_XSERVTransMakeAllCOTSServerListeners: failed to create listener for unix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It appears to be very simple problem where one just needs to add the paths in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instructions.json&lt;/code&gt; but the problem was that I added the paths right from the start.&lt;/p&gt;

&lt;p&gt;I was finally able to figure out the problem after a lot of testing. Actually, the compiler wasn’t compiling the code I edited; instead, it made a copy of manager.py and instructions.json in the root directory, which it then executed. The changes in my local repository didn’t effect other files because I mounted it with the RoboticsAcademy repository in the container. So, in the end, I updated the root directory’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;instructions.json&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;radi-23-or-242&quot;&gt;RADI 2.3 or 2.4.2&lt;/h2&gt;

&lt;p&gt;After resolving some more XML errors, I ran into another major error. ROS wasn’t able to find the Industrial Robots packages cloned in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/jderobot&lt;/code&gt; along with Custom Robots directory.  I tried changing the ROS PACKAGE PATH variable, but it didn’t help. I decided to put these packages in a catkin workspace after browsing the internet for a bit. However, there was no catkin workspace in RADI2.3, but there is in RADI2.4. So I had the option of creating a catkin workspace or upgrading to RADI2.4.2. I decided to use RADI2.4.2 after consulting with my mentor. I successfully moved on to RADI2.4.2 after making few adjustments in Dockerfile2.4.2 and manager.py.&lt;/p&gt;

&lt;p&gt;Finally, up until debugging level 4, the exercise was able to connect (simulation started and code and gui websockets opened). The gazebo was operational, and all of the objects, including the robot, were properly spawned.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/OMz9TQvn-Ijz2v2uXpeYrY0SEM14GD5uyVPWveaRyxqP4pHGLIP4A2JHxBM1YEYG39FKUFBRmBF4zsGUz9TtjIkOtSEuBN5MwMLb3_8Qgp9tykGJp7X5Vw8vb0NwoYmaJSjsj5gWFss1KXTZ-gc9KOMUlNzV9VtXKIDDUL-YQsrDcs_QJh29NKKsVcUKGxBeGEuF5FUfaVqAJgMvN92jkcRvsVtoCALHX0ADXLDO2P2aRZU9z3R8bw_K9_wOQCJMLst-olrsQnRQVGvdb4BLjm0d-Fx3lH0NDng7dq9XNw4VXuPnr8_s4FAF-o-wV8RL2prPwEcpKWDt6SeG46zEBC6TgOYwKLhTREgu29hqWiKv6QkHXjOUksBRsvANKElfkM8ag6MwSdjgb4bEVs8SSnHzS2-Ap2sglUPbR7LCFDmNErbdBDI-fUAw54Vh8gWAZoCiZFezLKCBfy8jjHL1meYoa-3wOQwvP9hC7Qtk9lG8vsohyl6-YfcmWWTkslm3sMxF_0A1p9Svq5QByRw1iLneck4Qv0bVOVTsxVPFUG1gGq_Qeb2M_QEhNV8DxTUK5_ocV3srESsCwwbJsJjm6suG92T3M0u3ezAv8xsWgs3aAMhZPEjS8dp--G2AbGpjIRHtFVzxV0PMsBnu0MQEWEL3RplJG9rM1ENOgfj59Up7pIuOx1-ndkP87rMR3DkcLxcF02JfWPwV9ghbVKNAkuU=w718-h404-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although the gazebo is working, there are still some warnings and errors which are needed to be resolved.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Err] [ModelDatabase.cc:390] Unable to parse model.config for model[http://gazebosim.org/models/bin_4_dropping_task]
Failed to load plugin libroboticsgroup_gazebo_mimic_joint_plugin.so: libroboticsgroup_gazebo_mimic_joint_plugin.so: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition, we are still a step away from fully connecting our exercise. The connection with code websocket is still not working, and the shell displays the following error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback (most recent call last):
File &quot;/RoboticsAcademy/exercises/pick_place/web-template/exercise.py&quot;, line 351, in &amp;lt;module&amp;gt;
    server.run_server()
File &quot;/RoboticsAcademy/exercises/pick_place/web-template/exercise.py&quot;, line 341, in run_server
    self.server = WebsocketServer(port=1905, host=self.host)
File &quot;/usr/local/lib/python2.7/dist-packages/websocket_server/websocket_server.py&quot;, line 97, in __init__
    TCPServer.__init__(self, (host, port), WebSocketHandler)
File &quot;/usr/lib/python2.7/SocketServer.py&quot;, line 420, in __init__
    self.server_bind()
File &quot;/usr/lib/python2.7/SocketServer.py&quot;, line 434, in server_bind
    self.socket.bind(self.server_address)
File &quot;/usr/lib/python2.7/socket.py&quot;, line 228, in meth
    return getattr(self._sock,name)(*args)
socket.error: [Errno 98] Address already in use
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s evident that ws code has several issues, and I’ll be fixing them and working on the widget/Rviz in the coming week.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Gazebo" /><category term="launchfile" /><summary type="html">APIs</summary></entry><entry><title type="html">Week 2</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2.html" rel="alternate" type="text/html" title="Week 2" /><published>2021-06-20T00:00:00+05:30</published><updated>2021-06-20T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/20/week-2.html">&lt;h2 id=&quot;version-control&quot;&gt;Version Control&lt;/h2&gt;

&lt;p&gt;This week didn’t start out the way I had planned, but it did teach me a valuable lesson about the significance of version control! I was working on adding gazebo to the exercise when I came upon this. I realised that the existing exercises didn’t seem to work properly. The reason for this is yet unknown, although it was most likely caused by two or more exercises requesting the same port in the websocket server. And things became even worse when I realised I hadn’t been committing to my changes for a few days. As a result, I had to restart the work from the begining.&lt;/p&gt;

&lt;p&gt;As I was going through the process of creating a new exercise, I figured out the solution for the problems that we were having with exercise connectivity and dockerfile. Previously, when I mounted the container’s repository with a local repository, the exercises weren’t unable to connect. The reason for this was due to the change in structure of repository caused by usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN rsync -a --exclude 'ace-builds' /RoboticsAcademy/exercises/static/exercises/* /RoboticsAcademy/exercises&lt;/code&gt; command used in the dockerfile. A temproary solution which I earlier went with was to change the path of each exercise manually in the &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/blob/master/scripts/instructions.json&quot;&gt;instructions.json&lt;/a&gt; but this might create merge conflicts. A better way of resolving this is to just use the same rync command after bind mount in the local repository. This will change the directory structure according to the paths in the instruction.json file. The same command can be used after the exercise has been created to structure  according to the original repository.&lt;/p&gt;

&lt;h2 id=&quot;launch-file-for-gazebo&quot;&gt;Launch file for Gazebo&lt;/h2&gt;

&lt;p&gt;I started working on our launch file after studying other exercises. Except for the point where the Kinematic Widget was called, this was going to be largely similar to the launch file of the ROS Node template. So I decided to include this widget in the html page and semd the commands to gazebo using roslibjs. This way, I’ll have to rewrite all of the interface functions, including GUI and HAL. However, it appears that I do not need to perform all of this and that simply using rqt will suffice. I’m not sure about this method, and we’ll talk about it in the next meeting.&lt;/p&gt;

&lt;h2 id=&quot;set-up-automated-build-on-docker-hub&quot;&gt;Set Up Automated Build on Docker Hub&lt;/h2&gt;

&lt;p&gt;Following discussions with mentors, we decided to use automated build for the industrial robots repo, so that the Docker hub can automatically generate images from source code in the pick &amp;amp; place branch and push the finalized image to the Docker repo. Others will be able to readily access the images with the most recent modifications in the exercise.&lt;/p&gt;

&lt;p&gt;However, there isn’t any official documentation on multi-stage builds on Docker Hub. I tried a few different approaches, such as using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./build.sh&lt;/code&gt; or building both images separately, but none of them worked. So we still have to figure out a way to get this working.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="Gazebo" /><category term="Rviz" /><category term="Git" /><summary type="html">Version Control</summary></entry><entry><title type="html">Week 1</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1.html" rel="alternate" type="text/html" title="Week 1" /><published>2021-06-14T00:00:00+05:30</published><updated>2021-06-14T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/coding%20period/2021/06/14/week-1.html">&lt;h2 id=&quot;pyqt5-gui&quot;&gt;PyQt5 GUI&lt;/h2&gt;

&lt;p&gt;This is the first week of coding period, so I started with designing UI for the web-templates. I began by making a simple PyQt5 GUI for a pick-and-place exercise.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pypi.org/project/PyQt5/&quot;&gt;PyQt5&lt;/a&gt; is a comprehensive set of Python bindings for Qt v5. It is implemented as more than 35 extension modules and enables Python to be used as an alternative application development language to C++ on all supported platforms including iOS and Android.&lt;/p&gt;

&lt;p&gt;Since the pick and place exercise necessitates heavy use of Gazebo and Rviz, I positioned their displays side by side so that users would not experience difficulty scrolling or changing tabs. The basic design of a GUI is seen in the figure below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/vW8PW_aGAPuWcyc9iP54UJWEiwo8LLA3Pwau2UFR1WNQwb9VnXAl5NGvkSTXJ7yw0SvzdgA1bY5U2gzsiH-rQDY59dze8Xq73ww_h_dHnY2Ic9cSKAbx0_J5qJLxuBq0Q-dzRj3Zxk44icgi4oD1MMULe2kIOvcTNHxY-rUwH8qU2XaqWFre9pMJ0A8CjFrfjUUJ0fRIXmQEg3J2XvgT2WcceKXPB4vXPrjRr2ekQs5SU9DbzZvV6yHuqWx9np4RFGPq_0Alg5tg_Adj3EkcAF3Vr-cDNN1aPE5SSZIIeHG7M6q_gSljcpvqgLRlXwodhWqUj8mgmIe9L5l2kyGkM6MXQp-NpfeoYW00l71v3WjW_LqhJVgz2P2Vcffxij5Q0XQibJDcyaVqsuCfcvqosKAHhc0wbIUm32xnjFvEk32Wba4BtUwJlZvgAI2nyxK4Iw2CINNUHnVBtW8VHCsv125S3Fo2AuhWNMKNLY1aYbsDC3XIbCW66NpT8truCh3ZbB2v278SMqn-Y3K9FMSwDuqXFPk258zaCjAunquOk5Z5snrZjVkeUXXcJKsevJz-t_uZabWzRU8RWWeb60DmVsa6Eu1JZCmZexAj7KAKrzKmlwhI03pq1HXWDZ0D8l3PuGvxwACDLcL7qn_TJp7WY0AGcZSTgJhEeuzxmpSvhKi-szlHMWjw0KJz4PtHtlDZzWZHk8rn-IVskVT1yCZYnF0=w1093-h838-no?authuser=0&quot; width=&quot;400&quot; height=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since Robotics Academy has shifted to web-templates, we will no longer be working on PyQt5 GUIs and will instead focus on improving the web-templates of current exercises.&lt;/p&gt;

&lt;h2 id=&quot;adding-cards-for-pick-and-place-exercise&quot;&gt;Adding cards for pick and place exercise&lt;/h2&gt;

&lt;p&gt;To include a new exercise, one needs to add the folder with the exercise contents in exercises/static/exercises following the file name conventions. Then, create the entry in db.sqlite3. A simple way to do this is by using the Django admin page:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run python3.8 manage.py runserver.&lt;/li&gt;
  &lt;li&gt;Access http://127.0.0.1:8000/admin/ on a browser and log in with “user” and “pass”.&lt;/li&gt;
  &lt;li&gt;Click on “add exercise” and fill the fields: exercise id (folder name), name (name to display), state, language and description (description to display). Save and exit.&lt;/li&gt;
  &lt;li&gt;Commit db.sqlite3 changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/4f1ZPcrCAryHH7LjQjJ8BmLmRBnVFPe1Mo7m6DYA_i1rvclknxnm7XSXovTmV5BSjKs7DuBM9Bp6ybIPdWdOnei5fqdI-fgltgiJM1YQ_1mWDQRmjVhmkszyuy0RHUcb1a5Z2TEeHB67WnFwzzNS90xjgntvbtv4_sshbfUa6EWYaXk5j7Ja2g8DgK3Hw_bCDDn9aB5w2YK7avrLyp0iGvLW6FZWG2JbnrXCmCEzcu31BJ8yy5sLwwQIo_snTUh16o3WxpMyP7IE_badYrFOyXYQMX2I_E4QkGiWm1qP2LXdXnhCAjF5cu5qv3wGX0AJFGKdoSQqYH9as-sC56AURLn8oDDyf444t7i-1Wgqg_fQVZt3Jxl3jtj6JfA7xPCqih10lUrv86jyw7RxK7fg6QSw8Tk6s9c4lSMr0m49RhXuO0O5WumUY3w5Gqv1hx_3No5BaKliJ6MrMNJeetjzXpP_ayvwKGNlvDfnRdDJmd1fwNhYeNk1qGtyOvIks_zl6430ugzQDghYkELMXafegQyZO8hoIetLBCX7abBk3Ydu-T_D2-z2AUKWf4w7Gtk1SRBjCpTIJ3GkdQXcQBVhhwUXV8wRabAAv3uAghZ8I7axfgnWD8jg8uvfvSE_uKWTrenEPIovrWcXo2bZySM0tsAZ1Tnoukbr4S8uk4wflMckyvmpZ-TcizeHbcX7pvW7si7S14XbQwsSbHUP0GE-GLE=w560-h315-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-interface-for-pick-and-place-exercise&quot;&gt;User Interface for pick and place exercise&lt;/h2&gt;

&lt;p&gt;I began working on the exercise’s User Interface after generating a card for pick and place. In this exercise, we have two options: we may use a Rviz display or we can abstract all of Rviz’s functions and develop an Industrial Robot Teleoperator that just provides the functionality required by the exercise, such as forward and inverse kinematics. We intend to use Rviz because other exercises may require it.&lt;/p&gt;

&lt;p&gt;The pick and place exercise is depicted in the image below. Rviz, on the other hand, has yet to be exposed on a VNC display. Following a discussion with my mentors, we agreed to make this a higher priority and get it up and running within the next week.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/GloyCMKSosFooNqZ6mBFj1eYGh67ohsoviQFWuPWFevjYOPvArphXibAN-uZN45UmDy8ufqiPE7XeYyBVGSktJzIbqfHtMV_R8na4LLHXYqyx_c2ZVNaEMjl6lKYybK3YFuSPdntxOJBfg_xKS8On0ga7vxriK22VAfanDPYcZWQFEpnP8hGOLPdbp1H2h_p-Bq38ehBoFsX-YcV55xQH2vQhdn0ELQ6RpfwxtTveywVwbzoJrOuJCDHQxKl5pLLLKmyHyAOO1scJmH6Qcv_SMLi8DhMQGbExiFeD0tAs86x2EkQYT_xI0p_TGXhPnhJndMkvDKc8jzpIPHfsybIQ0gotVbrFd_v4IfRCw3Sqccu-Uk6sgnoT9Zq0beNd5vPVMTQZumqy12B9XhBPuEaKMEoBeiW5tsX2sJc2_2ulIMTruAhiZsJxc5Yx-CXVxax9N7gxjHUEC3I44x_m0m8scIGek-yRK9E0rL927b0P9iO8YvfX1hvctE9Xu7Th6XKYpUGJ9P_3rrYUFx0KF5xrCYTF0JvIfPH5GsKEId6RkQsmSEua60UqyWRhOOL5fRXJL-xXCoJUOl44M9VYD-QWYJxpUOr0udkuhFZ7HAqITRK8sJk-REFexjWGsKHQ95aAXNMtqJPQ86IeurZzLy53Dd3MaL1NNEEvwmXEORbnp_8uBXbGvnKq5Ht9eBfoZYd2csFiK15FVEKK3pFhI0DcEY=w1477-h830-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;update-the-current-work-on-docker-hub&quot;&gt;Update the current work on docker hub&lt;/h2&gt;

&lt;h2 id=&quot;meet-1&quot;&gt;Meet 1&lt;/h2&gt;

&lt;p&gt;Minutes of the meet:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create a docker image, upload it on docker hub, and mention the details in week 1 blog.&lt;/li&gt;
  &lt;li&gt;Incorporate Gazebo in the current template&lt;/li&gt;
  &lt;li&gt;Incorporate Rviz in the current template&lt;/li&gt;
  &lt;li&gt;Notify once blog is updated on the slack channel&lt;/li&gt;
&lt;/ul&gt;</content><author><name>predator4hack</name></author><category term="coding period" /><category term="PyQt5" /><category term="Frontend" /><category term="UI/UX" /><category term="Meet" /><summary type="html">PyQt5 GUI</summary></entry><entry><title type="html">Community Bonding Week 2-3</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3.html" rel="alternate" type="text/html" title="Community Bonding Week 2-3" /><published>2021-06-06T00:00:00+05:30</published><updated>2021-06-06T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/06/06/community-bonding-week-2-3.html">&lt;h2 id=&quot;docker-bind-mount&quot;&gt;Docker Bind Mount&lt;/h2&gt;

&lt;p&gt;The first step in starting development in a docker container is to use bind mounts or volumes so that the changes in the docker container can be seen without having to rebuild the image. Bind mounts can be used to create side-by-side development environments and also to share data that needs to persist longer than the lifespan of the docker container.&lt;/p&gt;

&lt;p&gt;When you use a bind mount, a file or directory on the host machine is mounted into a container. The file or directory is referenced by its absolute path on the host machine. By contrast, when you use a volume, a new directory is created within Docker’s storage directory on the host machine, and Docker manages that directory’s contents.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://docs.docker.com/storage/images/types-of-mounts-volume.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;warnings-and-errors&quot;&gt;Warnings and errors&lt;/h3&gt;

&lt;h4 id=&quot;ros-gpg-key-expiration&quot;&gt;ROS GPG Key Expiration&lt;/h4&gt;

&lt;p&gt;ROS GPG keys inadvertently expired and caused apt failures for a number of users. A full description of the security breach and the remediation can be found in this &lt;a href=&quot;https://discourse.ros.org/t/new-gpg-keys-deployed-for-packages-ros-org/9454&quot;&gt;ROS Discourse post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To fix this issue one will need to update the public key used for ROS apt repositories. To do this for ROS 1 installations you need to run a single command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://github.com/JdeRobot/RoboticsAcademy/commit/842c0758a856c7119b6435fc8f17907bd17fdab1&quot;&gt;commit&lt;/a&gt; has been created in order to fix this issue.&lt;/p&gt;

&lt;h4 id=&quot;rle-exception&quot;&gt;RLE Exception&lt;/h4&gt;

&lt;p&gt;After successfully mounting the container with my local repository, I discovered that none of the exercises are connecting to the server and following error was displayed:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RLE Exception: [./RoboticsAcademy/exercises/follow_line/web-template/launch/simple_line_follower_ros_headless.launch] is not a launch file name The traceback for the exception was written to the log file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After altering the GAZEBO_RESOURCE_PATH and paths in instruction.json, the error was rectified.&lt;/p&gt;

&lt;h2 id=&quot;gazeboweb-testing&quot;&gt;GazeboWeb Testing&lt;/h2&gt;

&lt;p&gt;Robotics Academy uses GazeboWeb as a front-end graphical interface to gzserver which provides visualization of the simulation. Gzweb lets you interact with the simulation from the comfort of a web browser. This means cross-platform support, minimal client-side installation, and support for mobile devices.&lt;/p&gt;

&lt;p&gt;To learn how Gzweb works, I made a basic webpage, connected it to ROS with rosbridge server, and used the roslibjs package  to drive turtlebot3 around in a circle.  A short video below demonstrates the moving turtlebot after recieving commands from html page.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/OeIUv2RfDsURUvdcR9ojQEpCPRSWOIiE2lpwqOqH6frcVf0Bmz5utv6MeMOFW2coihkK5X8Nxe7kd-mtl-4di16d7tWgp_WTDPuSD4TBRdTmM8pXSgpRYyIyuDUh2RZMjV5J4hUuLdnc0wknr6aNZvfOQPcO7ycKoVcthp_OnLdlvNz40DCrEpZgOkV511ZtIfO7Chz5nUMykFql8CMLXc134C7YENwSKo8hM_mJzgIfOLBlXJZCwn4rdjHXYuMaG4Y8hMQV6droGe4LCaybPo18PDF9PHyXtXg5CpRFoocgZA3pyD4HveVvfVqXk59wgzIzw1qOBT5BFr-5jdBEMBt4-fgYpWKgygxSLzj8w4pthvm7vhzmEk46geQof1d4SFQvNmxXJrfkkAXxHQ9GyRcx9IX-o5-9Om39ktTbnCxfIk6J3Zxre0xzeD91akcSKqZL52h7byPjH1OFiwojT8Vail2q0ZJGnu0NQE1Ah220dScrQmK15x4Cfoypp5lUV2xt1GORM-3cca_U5M9_LXMm3gEb1Xf0cQb8V3g4OH9aH8e0yTSgGNTJmTO1u1szsVvxG2TfrnffBRF8QYV1vN3utemu0IMILzNRMVTzH-Ir8d0VNGV9hkDGPSj0w3O4heGRTjKiJ8hcnueaX2cwzRl1PQL0N6emje8-qpomnz9yc3nfMTp1Q3PTCaOt1Bzs2cIcjRFZ8u54cNeWRYhC1kc=w600-h338-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rvizweb-testing&quot;&gt;RvizWeb Testing&lt;/h2&gt;

&lt;p&gt;Rviz is required for Industrial Robot exercises, and RviWeb is one method for incorporating Rviz into a web page. RVizWeb provides a convenient way of building and launching a web application with features similar to RViz. This &lt;a href=&quot;https://github.com/osrf/rvizweb&quot;&gt;documentation&lt;/a&gt; contains further information on RvizWeb.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/3C_RFxIe0YD038mqlItSh8OlaAEvjsEqEL8HuHbl2XUPn0Ia1RmUd7yJlAjGDHWh7jbo6Iaieu9uM2Dm5qulk_nXJYplXrbXyg_67eCke-bEcU6TB-Ba8tya94xpCW8PcTXoolsIJ6KcbMoa6P22mdZUm05LqjbPiJ9ZDfO76Zq5GkAnwWJy78GoAobItslhscmz0Jl18Z2Pq2avg5NX0JVDXO8f6CiMaLI3WcDcaMNr3Zxw2oHjUKLUZsPDBy7puxeYxYOSirit_o7OYXPfMar4kBTu2LFBwVGst_yiaIJl2g9CuCL8pwufHx0oMpfvYVTRXLeq_uuQ22YPV952v3_ZCfC0HCBYOkStj-RDlwmnHvn7YcLRx5Oii0gnTW-i5OZzVrmp3fySIfEgIKHfw2hQuhm-QqlqBB4xza015i-MOunVxNgsQMUxiUsMlFpnDqbaLwUGNcGHGF5210l_ijwb0SgaGSv4qMfaL4vzJ4sJMuUVXCQwIHoXu9S7CvMNWNIXV9bAfDLKt29NoN2HBEGuf2VpjVsy5dX6rBpUM-qXJCuqoJGhW-esLrEY0J1pj0PKlpO7QyTOo_gjDKpxxaIQy7_vUlzeRmztAaZOL6Fo-aPolDw8Bu8D-el37elBSkLfCALXhCv3I57I4JazhZTJNO_ovmhJkx305vKleuDKXjYzS6qqRIW9jqIFkxRaFJrN_335FgaNZI0xU7Lgzks=w1477-h830-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-bullet-for-collision-checking&quot;&gt;Using Bullet for Collision Checking&lt;/h2&gt;

&lt;p&gt;According to the project proposal, we planned to use bullet for collision checking. Bullet has continuous collision capabilities. This means that it can be guaranteed that no collision occurs during the transition between two discrete robot states with the environment.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/RqqVC1F_ckEQjFGbrMxM8pejX-04uICab4NrQ2nF7hQNPYiGYMVmIlQIDG7Q8ZQrxnroydZTUfTbXsKji4jYwEkUK4Zk8CpQ8QBg_4pAIGt22m9puTW0zK7XL63XoMIkSQ50-PNZjqsZpFXKzOT-MX3Y5H9n5wpkyeopGucEbVC-qG0hSsKMV-mnVdZ58MejrZkNc3GxFTxKwx0qZBkS27PPLb9nLcgUCLtlLb8v7FC_3U73T-BXP9rKvWL_DxuJ_oA_heqgLmdqClozC57R9WEgw8RitvtIxt1KkW8aoxS1mz0KeLhKORFOcF6nDxYbSgVIP50CzK51gEhmRDZ_en0fWvzvZxIMCTFOoI-VdGgiWuwGMX096P-Ju7ASi3eCrBwLGLG1ThruiA_KnpzQofqWi54jZ8KYLSUiBeG7jD9olsk_pY52utvw3TN0gY7xcByS4HpzSX61JjED3F8L-KEMw_VHipplto9VrDbhy_gDbTuzl9IVJ8m38Z7vwsJurME6uQ8v99mzELPBy43RMgKOalt9FqY0_bW0FEkvhH8OUlcUef-tyo4aJRRVNOOjszmppyGeWhVpw0PSqF5WxEZQohYvBUfRpspC8gX7U4gpb58jJ_aCShyrs57swtsKURl7ValitwxCZZ1XgjQK-kVbLFQsN9IgaA1jOZSdc3Z1O9pmZXig0rEfrNMzTqKxjaYP6Zpx6rE34mp4qmJmuj4=w1477-h830-no?authuser=0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bullet’s only drawback is that it is not compatible with all versions. Bullet is a ROS1-Noetic and ROS2-Foxy. I also discovered that the bullet took a long time to compute the place of collision (much slower than using traditional non-continuous collision). As a result, I feel we can put the process of adding bullets into the industrial robot exercise on hold until we get to Noetic.&lt;/p&gt;</content><author><name>predator4hack</name></author><category term="community bonding" /><category term="docker" /><category term="Rvizweb" /><category term="Gzweb" /><summary type="html">Docker Bind Mount</summary></entry><entry><title type="html">Community Bonding - Week 1</title><link href="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/05/23/community-bonding-week-1.html" rel="alternate" type="text/html" title="Community Bonding - Week 1" /><published>2021-05-23T00:00:00+05:30</published><updated>2021-05-23T00:00:00+05:30</updated><id>https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/05/23/community-bonding-week-1</id><content type="html" xml:base="https://theroboticsclub.github.io/gsoc2021-Chandan_Kumar/community%20bonding/2021/05/23/community-bonding-week-1.html">&lt;p&gt;Google Summer of Code starts with the Community Bonding period where we get to know about the community and get familiar with the code base and work style.&lt;/p&gt;

&lt;p&gt;The first week of community bonding was all about getting familiar with JdeRobt Robotics Acadmey. Currently there are nine exercises that are updated in v2.3. The primary goal of this project is to add add three more exercises that are pick and place, machine vision and mobile manipulation exercise.&lt;/p&gt;

&lt;h2 id=&quot;pick-and-place&quot;&gt;Pick And Place&lt;/h2&gt;

&lt;p&gt;The goal of this exercise is to learn the underlying infrastructure of Industrial Robot exercises(ROS + MoveIt + our own industrial robotics API) and get familiar with the key components needed for more complex exercises by completing the task of pick and place multiple objects and classify them by color or shape. Link to the &lt;a href=&quot;http://jderobot.github.io/RoboticsAcademy/exercises/IndustrialRobots/pick_place&quot;&gt;exercise&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;machine-vision&quot;&gt;Machine Vision&lt;/h2&gt;

&lt;p&gt;The goal of this exercise is to learn how to use vision to assist industrial robot by detecting known objects and unknown obstacles. The shape, size and color of the objects are known, but the pose of them and the situation of obstacles in surrounding environment need to be found using two cameras. Link to the &lt;a href=&quot;http://jderobot.github.io/RoboticsAcademy/exercises/IndustrialRobots/machine_vision&quot;&gt;exercise&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;mobile-manipulation&quot;&gt;Mobile Manipulation&lt;/h2&gt;

&lt;p&gt;The goal of this exercise is to practice integrating navigation and manipulation. You will need to use a mobile manipulator(AGV+robot arm+gripper) to pick objects on one conveyor and place them on three other conveyors. Link to the &lt;a href=&quot;http://jderobot.github.io/RoboticsAcademy/exercises/IndustrialRobots/mobile_manipulation&quot;&gt;exercise&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;getting-familiar-with-the-web-template-and-docker&quot;&gt;Getting familiar with the web-template and docker&lt;/h1&gt;

&lt;p&gt;Ros is very specific to the versions of operating systems, packages and other dependencies. This is why it becomes difficult for a beginner to start off with the project. The installation has been greatly simplified, as all the required dependencies are already pre-installed in the &lt;a href=&quot;https://hub.docker.com/r/jderobot/robotics-academy&quot;&gt;Robotics-Academy Docker Image&lt;/a&gt;. Robotics Academy (2.3 release) supports Linux (Ubuntu 18.04, 20.04 and other distributions), MacOS and Windows.&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. More in the &lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;documentaion&lt;/a&gt; of Docker&lt;/p&gt;

&lt;h2 id=&quot;migration-of-industrial-robots-repository-to-current-radi&quot;&gt;Migration of Industrial Robots Repository to current RADI&lt;/h2&gt;

&lt;p&gt;The sole purpose of this task was to get familiarized with the structure of Robotics Academy Docker Image(RADI) and understand how to work with docker.&lt;/p&gt;

&lt;h3 id=&quot;warnings-and-errors&quot;&gt;Warnings and Errors&lt;/h3&gt;

&lt;p&gt;As Robotics Acadmey is using multi stage build which uses a build.sh script to automate the whole process, one small error occured which was due to limited permissions given while executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./build.sh &amp;lt;tag&amp;gt;&lt;/code&gt;
This can be easily resolved using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash ./build.sh&lt;/code&gt;.&lt;/p&gt;</content><author><name>Chandan</name></author><category term="community bonding" /><category term="docker" /><category term="exercises" /><summary type="html">Google Summer of Code starts with the Community Bonding period where we get to know about the community and get familiar with the code base and work style.</summary></entry></feed>